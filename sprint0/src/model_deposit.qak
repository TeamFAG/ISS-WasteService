System wasteservice_deposit

Dispatch notifyDeposit : notifyDeposit(MATERIAL, QUANTITY)
Dispatch updateWasteService : updateWasteService(MATERIAL, QUANTITY)

Context ctxdeposit ip [host="localhost" port=8020]

QActor wasteservice context ctxdeposit {
		[#
			var StoredPlastic = 0.0
			var StoredGlass = 0.0
		#]
	
	State init initial {
		printCurrentMessage
		println("\tWasteService | current plastic: $StoredPlastic, current glass: $StoredGlass")
		delay 1000
	}
	Goto sendDeposit
	
	State sendDeposit {
		[#
			var MaterialType = if(kotlin.random.Random.nextBoolean()) ws.Material.GLASS else ws.Material.PLASTIC
			var Quantity = kotlin.random.Random.nextDouble(10.0, 50.0)
		#]
		
		forward transporttrolley -m notifyDeposit : notifyDeposit($MaterialType, $Quantity)
	}
	Goto idle
	
	State idle {
		printCurrentMessage
		println("\tWasteService | current plastic: $StoredPlastic, current glass: $StoredGlass")
	}
	Transition t0 whenMsg updateWasteService -> updateValues
	
	State updateValues {
		onMsg( updateWasteService : updateWasteService(MATERIAL, QUANTITY) ) {
			if [# ws.Material.valueOf(payloadArg(0)) == ws.Material.PLASTIC #] {
				[# StoredPlastic += payloadArg(1).toDouble() #]
			} else {
				[# StoredGlass += payloadArg(1).toDouble() #]
			}
		}	
	}
	//Goto idle
	// change this Goto in order to send multiple requests
	 Goto init
}

QActor transporttrolley context ctxdeposit {
		[#
			var CarriedQuantity : Double = 0.0
			var CarriedMaterialType = ws.Material.PLASTIC
		#]
	
	
	State init initial {
		printCurrentMessage
		println("\tTransportTrolley | init at HOME")
		//updateResource [# "pos(home)" #]
	}
	Transition t0 whenMsg notifyDeposit -> goIndoor

	State goIndoor {
		printCurrentMessage
		println("\tTransportTrollye | going to INDOOR port")
		
		onMsg( notifyDeposit : notifyDeposit(MATERIAL, QUANTITY) ) {
			[#
				CarriedMaterialType = ws.Material.valueOf(payloadArg(0))
				CarriedQuantity = payloadArg(1).toDouble() 
			#]
		}
		
		delay 500
	}
	Goto indoor

	State indoor {
		printCurrentMessage
		println("\tTransportTrolley | At INDOOR port, picking up $CarriedQuantity KG of $CarriedMaterialType")
		// updateResource [# "pos(indoor)" #]
	}
	Goto goBox

	State goBox {
		printCurrentMessage
		println("\tTransportTrolley | going to $CarriedMaterialType box")
		
		if [# CarriedMaterialType == ws.Material.PLASTIC #] {
			delay 500
		} else {
			delay 700
		}
	}
	Goto box
	
	State box {
		printCurrentMessage
		println("\tTransportTrolley | At $CarriedMaterialType box, unloading $CarriedQuantity KG of $CarriedMaterialType")
		// updateResource [# "pos("$CarriedMaterialType"_box)" #]
		delay 250
		
		forward wasteservice -m updateWasteService : updateWasteService($CarriedMaterialType, $CarriedQuantity)
	}
	Goto goHome
	
	State goHome {
		printCurrentMessage
		println("\tTransportTrolley | going back to HOME")
		delay 500
	}
	Goto home
	
	State home {
		printCurrentMessage
		println("\tTransportTrolley | at HOME")
	}
	Goto done 
	
	State done {
		printCurrentMessage
		println("\tTransportTrolley | done")
	}
	Goto init
	
	// Goto init obbliga il trolley a tornare sempre alla HOME al termine di una richiesta, non sarï¿½ giusto una volta finiti i modelli
}



