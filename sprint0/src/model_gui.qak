 System wasteservice_gui


// POSITION: HOME | INDOOR | GLASSBOX | PLASTICBOX
// TROLLEY STATUS: IDLE | MOVING | STOPPED | PICKUP | DEPOSIT
// LED STATUS: ON | OFF | BLINKING
// WEIGHT: duble values

Event update_position : update_position(POSITION)
Event update_trolley_status : update_trolley_status(STATUS)
Event update_led_status : update_led_status(STATUS)
Event update_weight : update_weight(GLASS, PLASTIC)

Context ctxwasteservicegui ip[host="localhost" port=8030]


QActor gui context ctxwasteservicegui {
	
	[#
		var POSITION = ws.TrolleyPosition.HOME
		var TROLLEY = ws.TrolleyStatus.IDLE
		var LED = ws.LedState.OFF
		var PLASTIC = 0.0
		var GLASS = 0.0
	#]
	   	
	State init initial {
	   printCurrentMessage
	   
	}
	Transition t0 whenEvent update_position -> handle_position
				  whenEvent update_trolley_status -> handle_trolley_status
				  whenEvent update_led_status -> handle_led_status
				  whenEvent update_weight -> handle_weight
	
	
	State handle_position {
		printCurrentMessage
		
		onMsg(update_position : update_position(POSITION)) {
			[#
				POSITION = ws.TrolleyPosition.valueOf(payloadArg(0))	
			#]
			
			// updateResources
		}
	}
	Goto init
	
	State handle_trolley_status {
		printCurrentMessage
		
		onMsg(update_trolley_status : update_trolley_status(STATUS)) {
			[#
				TROLLEY = ws.TrolleyStatus.valueOf(payloadArg(0))	
			#]
			
			// updateResources
		}
	}
	Goto init
	
	State handle_led_status {
		printCurrentMessage
		
		onMsg(update_led_status : update_led_status(STATUS)) {
			[#
				LED = ws.LedState.valueOf(payloadArg(0))	
			#]
			
			// updateResources
		}
	}
	Goto init
	
	State handle_weight {
		printCurrentMessage
		
		onMsg(update_weight : update_WEIGHT(GLASS, PLASTIC)) {
			[#
				var GLASS = payloadArg(0).toDouble()
				var PLASTIC = payloadArg(1).toDouble()
			#]
			
			// updateResources
		}
	}
	Goto init
}