 System wasteservice_gui


// POSITION: HOME | INDOOR | GLASSBOX | PLASTICBOX
// TROLLEY STATUS: IDLE | MOVING | STOPPED | PICKUP | DEPOSIT
// LED STATUS: ON | OFF | BLINKING
// WEIGHT: duble values

Event updatePosition : updatePosition(POSITION)
Event updateTrolleyStatus : updateTrolleyStatus(STATUS)
Event updateLedStatus : updateLedStatus(STATUS)
Event updateWeight : updateWeight(GLASS, PLASTIC)

Context ctxwasteservicegui ip[host="localhost" port=8030]

QActor gui context ctxwasteservicegui {
	
	[#
		var POSITION = ws.TrolleyPosition.HOME
		var TROLLEY = ws.TrolleyStatus.IDLE
		var LED = ws.LedState.OFF
		var PLASTIC = 0.0
		var GLASS = 0.0
	#]
	   	
	State init initial {
	   printCurrentMessage
	   
	}
	Transition t0 whenEvent updatePosition -> handlePosition
				  whenEvent updateTrolleyStatus -> handleTrolleyStatus
				  whenEvent updateLedStatus -> handleLedStatus
				  whenEvent updateWeight -> handleWeight

	
	State handlePosition {
		printCurrentMessage
		
		onMsg(updatePosition : updatePosition(POSITION)) {
			[#
				POSITION = ws.TrolleyPosition.valueOf(payloadArg(0))	
			#]
			
			// updateResources
		}
	}
	Goto init
	
	State handleTrolleyStatus {
		printCurrentMessage
		
		onMsg(updateTrolleyStatus : updateTrolleyStatus(STATUS)) {
			[#
				TROLLEY = ws.TrolleyStatus.valueOf(payloadArg(0))	
			#]
			
			// updateResources
		}
	}
	Goto init
	
	State handleLedStatus {
		printCurrentMessage
		
		onMsg(updateLedStatus : updateLedStatus(STATUS)) {
			[#
				LED = ws.LedState.valueOf(payloadArg(0))	
			#]
			
			// updateResources
		}
	}
	Goto init
	
	State handleWeight {
		printCurrentMessage
		
		onMsg(updateWeight : updateWeight(GLASS, PLASTIC)) {
			[#
				var GLASS = payloadArg(0).toDouble()
				var PLASTIC = payloadArg(1).toDouble()
			#]
			
			// updateResources
		}
	}
	Goto init
}