/* Generated by AN DISI Unibo */ 
package it.unibo.wasteservice

import it.unibo.kactor.*
import alice.tuprolog.*
import kotlinx.coroutines.CoroutineScope
import kotlinx.coroutines.delay
import kotlinx.coroutines.launch
import kotlinx.coroutines.runBlocking
	
class Wasteservice ( name: String, scope: CoroutineScope  ) : ActorBasicFsm( name, scope ){

	override fun getInitialState() : String{
		return "init"
	}
	override fun getBody() : (ActorBasicFsm.() -> Unit){
		val interruptedStateTransitions = mutableListOf<Transition>()
		
				var CurrentMaterial : ws.Material
				var CurrentQuantity : Float
		return { //this:ActionBasciFsm
				state("init") { //this:State
					action { //it:State
						println("$name in ${currentState.stateName} | $currentMsg")
						println("	WASTESERVICE | Started... waiting for truck driver")
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition(edgeName="t10",targetState="handleTruckRequest",cond=whenRequest("storeRequest"))
				}	 
				state("idle") { //this:State
					action { //it:State
						println("	WASTESERVICE | idle...")
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
				}	 
				state("handleTruckRequest") { //this:State
					action { //it:State
						if( checkMsgContent( Term.createTerm("storeRequest(MATERIAL,QUANTITY)"), Term.createTerm("storeRequest(MATERIAL,QUANTITY)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								
												CurrentMaterial = ws.Material.valueOf(payloadArg(0))
												CurrentQuantity = payloadArg(1).toFloat()
								println("	WASTESERVICE | received store request: $CurrentQuantity KG of $CurrentMaterial")
								if(  ws.WasteServiceStatusManager.checkIfDepositPossible(CurrentMaterial, CurrentQuantity)  
								 ){answer("storeRequest", "loadAccepted", "loadAccepted(_)","wastetruck"   )  
								 ws.WasteServiceStatusManager.updateBox(CurrentMaterial, CurrentQuantity)  
								println("	WASTESERVICE | accepted request from truck driver")
								forward("notifyDeposit", "notifyDeposit($CurrentMaterial,$CurrentQuantity)" ,"transporttrolley" ) 
								println("	WASTESERVICE | notifying transporttrolley")
								}
								else
								 {answer("storeRequest", "loadRejected", "loadRejected(_)","wastetruck"   )  
								 println("	WASTESERVICE | rejected request from truck driver")
								 }
						}
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition( edgeName="goto",targetState="idle", cond=doswitch() )
				}	 
			}
		}
}
