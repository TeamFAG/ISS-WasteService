/* Generated by AN DISI Unibo */ 
package it.unibo.transporttrolley

import it.unibo.kactor.*
import alice.tuprolog.*
import kotlinx.coroutines.CoroutineScope
import kotlinx.coroutines.delay
import kotlinx.coroutines.launch
import kotlinx.coroutines.runBlocking
	
class Transporttrolley ( name: String, scope: CoroutineScope  ) : ActorBasicFsm( name, scope ){

	override fun getInitialState() : String{
		return "init"
	}
	override fun getBody() : (ActorBasicFsm.() -> Unit){
		val interruptedStateTransitions = mutableListOf<Transition>()
		
					var CarriedQuantity : Double = 0.0
					var CarriedMaterialType = ws.Material.PLASTIC
		return { //this:ActionBasciFsm
				state("init") { //this:State
					action { //it:State
						println("$name in ${currentState.stateName} | $currentMsg")
						println("	TRANPOSRTTROLLEY | init at HOME")
						 
									var Pos = ws.TrolleyPosition.HOME
									var Status = ws.TrolleyStatus.IDLE 
						emit("updatePosition", "updatePosition($Pos)" ) 
						emit("updateTrolleyStatus", "updateTrolleyStatus($Status)" ) 
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition(edgeName="t01",targetState="goIndoor",cond=whenDispatch("notifyDeposit"))
				}	 
				state("goIndoor") { //this:State
					action { //it:State
						
									var Move = "w"
									var Status = ws.TrolleyStatus.MOVING
						println("$name in ${currentState.stateName} | $currentMsg")
						println("	TRANSPORTTROLLEY | going to INDOOR port")
						if( checkMsgContent( Term.createTerm("notifyDeposit(MATERIAL,QUANTITY)"), Term.createTerm("notifyDeposit(MATERIAL,QUANTITY)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								
												CarriedMaterialType = ws.Material.valueOf(payloadArg(0))
												CarriedQuantity = payloadArg(1).toDouble() 
						}
						forward("cmd", "cmd(w)" ,"basicrobot" ) 
						request("step", "step(500)" ,"basicrobot" )  
						emit("updateTrolleyStatus", "updateTrolleyStatus($Status)" ) 
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition(edgeName="t12",targetState="indoor",cond=whenReply("stepdone"))
					transition(edgeName="t13",targetState="goIndoor",cond=whenReply("stepfail"))
				}	 
				state("indoor") { //this:State
					action { //it:State
						println("$name in ${currentState.stateName} | $currentMsg")
						println("	TRANSPORTTROLLEY | At INDOOR port, picking up $CarriedQuantity KG of $CarriedMaterialType")
						 
									var Pos = ws.TrolleyPosition.INDOOR 
									var Status = ws.TrolleyStatus.PICKUP	
						emit("updatePosition", "updatePosition($Pos)" ) 
						emit("updateTrolleyStatus", "updateTrolleryStatus($Status)" ) 
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition( edgeName="goto",targetState="goBox", cond=doswitch() )
				}	 
				state("goBox") { //this:State
					action { //it:State
						println("$name in ${currentState.stateName} | $currentMsg")
						println("	TRANSPORTTROLLEY | going to $CarriedMaterialType box")
						if(  CarriedMaterialType == ws.Material.PLASTIC  
						 ){forward("cmd", "cmd(w)" ,"basicrobot" ) 
						request("step", "step(500)" ,"basicrobot" )  
						}
						else
						 {forward("cmd", "cmd(w)" ,"basicrobot" ) 
						 request("step", "step(700)" ,"basicrobot" )  
						 }
						 
									var Status = ws.TrolleyStatus.MOVING	
						emit("updateTrolleyStatus", "updateTrolleyStatus($Status)" ) 
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition(edgeName="t34",targetState="box",cond=whenReply("stepdone"))
					transition(edgeName="t35",targetState="goBox",cond=whenReply("stepfail"))
				}	 
				state("box") { //this:State
					action { //it:State
						println("$name in ${currentState.stateName} | $currentMsg")
						println("	TRANSPORTTROLLEY | At $CarriedMaterialType box, unloading $CarriedQuantity KG of $CarriedMaterialType")
						 
									var Pos = if(CarriedMaterialType.equals(ws.Material.PLASTIC)) ws.TrolleyPosition.PLASTICBOX else ws.TrolleyPosition.GLASSBOX
									var Status = ws.TrolleyStatus.DEPOSIT 
						emit("updatePosition", "updatePosition($Pos)" ) 
						emit("updateTrolleyStatus", "updateTrolleyStatus($Status)" ) 
						delay(250) 
						emit("updateWeight", "updateWeight(_)" ) 
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition( edgeName="goto",targetState="goHome", cond=doswitch() )
				}	 
				state("goHome") { //this:State
					action { //it:State
						println("$name in ${currentState.stateName} | $currentMsg")
						println("	TRANSPORTTROLLEY | going back to HOME")
						
									var Status = ws.TrolleyStatus.MOVING
						forward("cmd", "cmd(w)" ,"basicrobot" ) 
						request("step", "step(500)" ,"basicrobot" )  
						emit("updateTrolleyStatus", "updateTrolleyStatus($Status)" ) 
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition(edgeName="t56",targetState="home",cond=whenReply("stepdone"))
					transition(edgeName="t57",targetState="goHome",cond=whenReply("stepfail"))
				}	 
				state("home") { //this:State
					action { //it:State
						println("$name in ${currentState.stateName} | $currentMsg")
						println("	TRANSPORTTROLLEY | at HOME")
						 var Pos = ws.TrolleyPosition.HOME  
						emit("updatePosition", "updatePosition($Pos)" ) 
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition( edgeName="goto",targetState="done", cond=doswitch() )
				}	 
				state("done") { //this:State
					action { //it:State
						println("$name in ${currentState.stateName} | $currentMsg")
						println("	TRANSPORTTROLLEY | done")
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition( edgeName="goto",targetState="init", cond=doswitch() )
				}	 
			}
		}
}
