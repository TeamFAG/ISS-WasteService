/* Generated by AN DISI Unibo */ 
package it.unibo.transporttrolley

import it.unibo.kactor.*
import alice.tuprolog.*
import kotlinx.coroutines.CoroutineScope
import kotlinx.coroutines.delay
import kotlinx.coroutines.launch
import kotlinx.coroutines.runBlocking
	
class Transporttrolley ( name: String, scope: CoroutineScope  ) : ActorBasicFsm( name, scope ){

	override fun getInitialState() : String{
		return "init"
	}
	override fun getBody() : (ActorBasicFsm.() -> Unit){
		val interruptedStateTransitions = mutableListOf<Transition>()
		
					var CarriedQuantity : Double = 0.0
					var CarriedMaterialType = ws.Material.PLASTIC
		return { //this:ActionBasciFsm
				state("init") { //this:State
					action { //it:State
						println("$name in ${currentState.stateName} | $currentMsg")
						println("	TransportTrolley | init at HOME")
					}
					 transition(edgeName="t01",targetState="goIndoor",cond=whenDispatch("notifyDeposit"))
				}	 
				state("goIndoor") { //this:State
					action { //it:State
						println("$name in ${currentState.stateName} | $currentMsg")
						println("	TransportTrollye | going to INDOOR port")
						if( checkMsgContent( Term.createTerm("notifyDeposit(MATERIAL,QUANTITY)"), Term.createTerm("notifyDeposit(MATERIAL,QUANTITY)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								
												CarriedMaterialType = ws.Material.valueOf(payloadArg(0))
												CarriedQuantity = payloadArg(1).toDouble() 
						}
						delay(500) 
					}
					 transition( edgeName="goto",targetState="indoor", cond=doswitch() )
				}	 
				state("indoor") { //this:State
					action { //it:State
						println("$name in ${currentState.stateName} | $currentMsg")
						println("	TransportTrolley | At INDOOR port, picking up $CarriedQuantity KG of $CarriedMaterialType")
					}
					 transition( edgeName="goto",targetState="goBox", cond=doswitch() )
				}	 
				state("goBox") { //this:State
					action { //it:State
						println("$name in ${currentState.stateName} | $currentMsg")
						println("	TransportTrolley | going to $CarriedMaterialType box")
						if(  CarriedMaterialType == ws.Material.PLASTIC  
						 ){delay(500) 
						}
						else
						 {delay(700) 
						 }
					}
					 transition( edgeName="goto",targetState="box", cond=doswitch() )
				}	 
				state("box") { //this:State
					action { //it:State
						println("$name in ${currentState.stateName} | $currentMsg")
						println("	TransportTrolley | At $CarriedMaterialType box, unloading $CarriedQuantity KG of $CarriedMaterialType")
						delay(250) 
						forward("updateWasteService", "updateWasteService($CarriedMaterialType,$CarriedQuantity)" ,"wasteservice" ) 
					}
					 transition( edgeName="goto",targetState="goHome", cond=doswitch() )
				}	 
				state("goHome") { //this:State
					action { //it:State
						println("$name in ${currentState.stateName} | $currentMsg")
						println("	TransportTrolley | going back to HOME")
						delay(500) 
					}
					 transition( edgeName="goto",targetState="home", cond=doswitch() )
				}	 
				state("home") { //this:State
					action { //it:State
						println("$name in ${currentState.stateName} | $currentMsg")
						println("	TransportTrolley | at HOME")
					}
					 transition( edgeName="goto",targetState="done", cond=doswitch() )
				}	 
				state("done") { //this:State
					action { //it:State
						println("$name in ${currentState.stateName} | $currentMsg")
						println("	TransportTrolley | done")
					}
					 transition( edgeName="goto",targetState="init", cond=doswitch() )
				}	 
			}
		}
}
