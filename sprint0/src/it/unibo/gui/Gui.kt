/* Generated by AN DISI Unibo */ 
package it.unibo.gui

import it.unibo.kactor.*
import alice.tuprolog.*
import kotlinx.coroutines.CoroutineScope
import kotlinx.coroutines.delay
import kotlinx.coroutines.launch
import kotlinx.coroutines.runBlocking
	
class Gui ( name: String, scope: CoroutineScope  ) : ActorBasicFsm( name, scope ){

	override fun getInitialState() : String{
		return "init"
	}
	override fun getBody() : (ActorBasicFsm.() -> Unit){
		val interruptedStateTransitions = mutableListOf<Transition>()
		
				var POSITION = ws.TrolleyPosition.HOME
				var TROLLEY = ws.TrolleyStatus.IDLE
				var LED = ws.LedState.OFF
				var PLASTIC = 0.0
				var GLASS = 0.0
		return { //this:ActionBasciFsm
				state("init") { //this:State
					action { //it:State
						println("$name in ${currentState.stateName} | $currentMsg")
					}
					 transition(edgeName="t00",targetState="handle_position",cond=whenEvent("update_position"))
					transition(edgeName="t01",targetState="handle_trolley_status",cond=whenEvent("update_trolley_status"))
					transition(edgeName="t02",targetState="handle_led_status",cond=whenEvent("update_led_status"))
					transition(edgeName="t03",targetState="handle_weight",cond=whenEvent("update_weight"))
				}	 
				state("handle_position") { //this:State
					action { //it:State
						println("$name in ${currentState.stateName} | $currentMsg")
						if( checkMsgContent( Term.createTerm("update_position(POSITION)"), Term.createTerm("update_position(POSITION)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								
												POSITION = ws.TrolleyPosition.valueOf(payloadArg(0))	
						}
					}
					 transition( edgeName="goto",targetState="init", cond=doswitch() )
				}	 
				state("handle_trolley_status") { //this:State
					action { //it:State
						println("$name in ${currentState.stateName} | $currentMsg")
						if( checkMsgContent( Term.createTerm("update_trolley_status(STATUS)"), Term.createTerm("update_trolley_status(STATUS)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								
												TROLLEY = ws.TrolleyStatus.valueOf(payloadArg(0))	
						}
					}
					 transition( edgeName="goto",targetState="init", cond=doswitch() )
				}	 
				state("handle_led_status") { //this:State
					action { //it:State
						println("$name in ${currentState.stateName} | $currentMsg")
						if( checkMsgContent( Term.createTerm("update_led_status(STATUS)"), Term.createTerm("update_led_status(STATUS)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								
												LED = ws.LedState.valueOf(payloadArg(0))	
						}
					}
					 transition( edgeName="goto",targetState="init", cond=doswitch() )
				}	 
				state("handle_weight") { //this:State
					action { //it:State
						println("$name in ${currentState.stateName} | $currentMsg")
						if( checkMsgContent( Term.createTerm("update_weight(GLASS,PLASTIC)"), Term.createTerm("update_WEIGHT(GLASS,PLASTIC)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								
												var GLASS = payloadArg(0).toDouble()
												var PLASTIC = payloadArg(1).toDouble()
						}
					}
					 transition( edgeName="goto",targetState="init", cond=doswitch() )
				}	 
			}
		}
}
