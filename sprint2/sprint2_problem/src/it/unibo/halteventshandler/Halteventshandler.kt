/* Generated by AN DISI Unibo */ 
package it.unibo.halteventshandler

import it.unibo.kactor.*
import alice.tuprolog.*
import kotlinx.coroutines.CoroutineScope
import kotlinx.coroutines.delay
import kotlinx.coroutines.launch
import kotlinx.coroutines.runBlocking
	
class Halteventshandler ( name: String, scope: CoroutineScope  ) : ActorBasicFsm( name, scope ){

	override fun getInitialState() : String{
		return "init"
	}
	override fun getBody() : (ActorBasicFsm.() -> Unit){
		val interruptedStateTransitions = mutableListOf<Transition>()
		return { //this:ActionBasciFsm
				state("init") { //this:State
					action { //it:State
						println("	HALTEVENTSHANDLER | init...")
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition( edgeName="goto",targetState="idle", cond=doswitch() )
				}	 
				state("idle") { //this:State
					action { //it:State
						println("	HALTEVENTSHANDLER | waiting for startHalt Event...")
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition(edgeName="t027",targetState="sendHalt",cond=whenEvent("startHalt"))
				}	 
				state("sendHalt") { //this:State
					action { //it:State
						println("	HALTEVENTSHANDLER | received startHalt Event, sending notification to pather...")
						forward("halt", "halt(_)" ,"pather" ) 
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition(edgeName="t028",targetState="sendResume",cond=whenEvent("stopHalt"))
				}	 
				state("sendResume") { //this:State
					action { //it:State
						println("	HALTEVENTSHANDLER | received stopHalt Event, sending notification to pather...")
						forward("resume", "resume(_)" ,"pather" ) 
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition( edgeName="goto",targetState="idle", cond=doswitch() )
				}	 
			}
		}
}
