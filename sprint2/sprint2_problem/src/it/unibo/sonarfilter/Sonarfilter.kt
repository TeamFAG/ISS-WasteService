/* Generated by AN DISI Unibo */ 
package it.unibo.sonarfilter

import it.unibo.kactor.*
import alice.tuprolog.*
import kotlinx.coroutines.CoroutineScope
import kotlinx.coroutines.delay
import kotlinx.coroutines.launch
import kotlinx.coroutines.runBlocking
	
class Sonarfilter ( name: String, scope: CoroutineScope  ) : ActorBasicFsm( name, scope ){

	override fun getInitialState() : String{
		return "init"
	}
	override fun getBody() : (ActorBasicFsm.() -> Unit){
		val interruptedStateTransitions = mutableListOf<Transition>()
		
				var D = 0
				var DLIMIT = 10
				var Halted = false
		return { //this:ActionBasciFsm
				state("init") { //this:State
					action { //it:State
						println("	SONARFILTER | started.")
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition(edgeName="t032",targetState="filterDistance",cond=whenEvent("distance"))
				}	 
				state("filterDistance") { //this:State
					action { //it:State
						if( checkMsgContent( Term.createTerm("distance(V)"), Term.createTerm("distance(V)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								 D = payloadArg(0).toInt()  
								if(  D < DLIMIT && !Halted  
								 ){ Halted = true  
								println("	SONARFILTER | emitting start halt")
								emit("startHalt", "startHalt(_)" ) 
								}
								if(  D > DLIMIT && Halted  
								 ){ Halted = false  
								println("	SONARFILTER | emitting stop halt")
								emit("stopHalt", "stopHalt(_)" ) 
								}
						}
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition(edgeName="t133",targetState="filterDistance",cond=whenEvent("distance"))
				}	 
			}
		}
}
