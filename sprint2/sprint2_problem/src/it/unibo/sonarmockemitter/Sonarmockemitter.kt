/* Generated by AN DISI Unibo */ 
package it.unibo.sonarmockemitter

import it.unibo.kactor.*
import alice.tuprolog.*
import kotlinx.coroutines.CoroutineScope
import kotlinx.coroutines.delay
import kotlinx.coroutines.launch
import kotlinx.coroutines.runBlocking
	
class Sonarmockemitter ( name: String, scope: CoroutineScope  ) : ActorBasicFsm( name, scope ){

	override fun getInitialState() : String{
		return "init"
	}
	override fun getBody() : (ActorBasicFsm.() -> Unit){
		val interruptedStateTransitions = mutableListOf<Transition>()
		return { //this:ActionBasciFsm
				state("init") { //this:State
					action { //it:State
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition( edgeName="goto",targetState="doWork", cond=doswitch() )
				}	 
				state("doWork") { //this:State
					action { //it:State
						emit("distance", "distance(V)" ) 
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
				 	 		//sysaction { //it:State
				 	 		  stateTimer = TimerActor("timer_doWork", 
				 	 			scope, context!!, "local_tout_sonarmockemitter_doWork", 500.toLong() )
				 	 		//}
					}	 	 
					 transition(edgeName="t032",targetState="doWork",cond=whenTimeout("local_tout_sonarmockemitter_doWork"))   
				}	 
			}
		}
}
