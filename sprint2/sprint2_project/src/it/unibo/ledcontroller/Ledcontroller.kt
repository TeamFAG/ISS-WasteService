/* Generated by AN DISI Unibo */ 
package it.unibo.ledcontroller

import it.unibo.kactor.*
import alice.tuprolog.*
import kotlinx.coroutines.CoroutineScope
import kotlinx.coroutines.delay
import kotlinx.coroutines.launch
import kotlinx.coroutines.runBlocking
	
class Ledcontroller ( name: String, scope: CoroutineScope  ) : ActorBasicFsm( name, scope ){

	override fun getInitialState() : String{
		return "init"
	}
	override fun getBody() : (ActorBasicFsm.() -> Unit){
		val interruptedStateTransitions = mutableListOf<Transition>()
		 
				var LedState = ws.LedState.OFF
				var Simulation: Boolean = true
				lateinit var Led: `it.unibo`.radarSystem22.domain.interfaces.ILed
		return { //this:ActionBasciFsm
				state("init") { //this:State
					action { //it:State
						println("	LED | started.")
						updateResourceRep( "led(OFF)"  
						)
						
									SystemConfig.setTheConfiguration("SystemConfiguration")
									Simulation = SystemConfig.sonar["simulation"] as Boolean
									
									`it.unibo`.radarSystem22.domain.utils.DomainSystemConfig.simulation = Simulation
									`it.unibo`.radarSystem22.domain.utils.DomainSystemConfig.ledGui = Simulation
									
									Led = `it.unibo`.radarSystem22.domain.DeviceFactory.createLed()
									Led.turnOff()
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition(edgeName="t028",targetState="handleEvent",cond=whenEvent("updateLed"))
				}	 
				state("handleEvent") { //this:State
					action { //it:State
						if( checkMsgContent( Term.createTerm("updateLed(STATE)"), Term.createTerm("updateLed(STATE)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								 LedState = ws.LedState.valueOf(payloadArg(0))  
						}
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition( edgeName="goto",targetState="blink", cond=doswitchGuarded({ LedState.equals(ws.LedState.BLINKING)  
					}) )
					transition( edgeName="goto",targetState="notBlink", cond=doswitchGuarded({! ( LedState.equals(ws.LedState.BLINKING)  
					) }) )
				}	 
				state("notBlink") { //this:State
					action { //it:State
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition( edgeName="goto",targetState="on", cond=doswitchGuarded({ LedState.equals(ws.LedState.ON)  
					}) )
					transition( edgeName="goto",targetState="off", cond=doswitchGuarded({! ( LedState.equals(ws.LedState.ON)  
					) }) )
				}	 
				state("on") { //this:State
					action { //it:State
						updateResourceRep( "led(ON)"  
						)
						 
									ws.LedUtils.printLedState("\tLED | led ON")
									Led.turnOn() 
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition(edgeName="t029",targetState="handleEvent",cond=whenEvent("updateLed"))
				}	 
				state("off") { //this:State
					action { //it:State
						updateResourceRep( "led(OFF)"  
						)
						
									ws.LedUtils.printLedState("\tLED | led OFF")
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition(edgeName="t030",targetState="handleEvent",cond=whenEvent("updateLed"))
				}	 
				state("blink") { //this:State
					action { //it:State
						updateResourceRep( "led(BLINKING)"  
						)
						 
									ws.LedUtils.printLedState("\tLED | led BLINKING")
									ws.LedUtils.loop() 
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition(edgeName="t031",targetState="handleEvent",cond=whenEvent("updateLed"))
				}	 
			}
		}
}
