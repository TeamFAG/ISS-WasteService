System sprint2_project_single_context

// Coap
Dispatch coapUpdate: coapUpdate(RESOURCE, VALUE)

// Smartdevice
Request storeRequest : storeRequest(MATERIAL, QUANTITY)		// MATERIAL := GLASS | PLASTIC
Reply loadAccepted : loadAccepted(_)
Reply loadRejected : loadRejected(_)

// Wasteservice
Request depositRequest : depositRequest(MATERIAL, QUANTITY)	// MATERIAL := GLASS | PLASTIC
Reply pickupDone : pickupDone(RESULT)

// Transporttrolley
Request move : move(LOCATION)	// LOCATION := HOME | INDOOR | GLASSBOX | PLASTICBOX
Reply moveDone : moveDone(ANSWER)

// Trolleymover
Request doPath : doPath(PATH, OWNER)
Reply doPathDone : doPathDone(ARG)
Reply doPathFail : doPathFail(ARG)
Request stopPath : stopPath(_)
Reply stopAck : stopAck(_)

// Basicrobot
Dispatch cmd : cmd(MOVE)
Dispatch end       	: end(ARG)  
Request step : step(TIME)
Reply stepdone : stepdone(V)
Reply stepfail : stepfail(V)
Event alarm : alarm(X)
Event  sonar       : sonar( DISTANCE )
Dispatch obstacle  : obstacle( ARG ) 	//generated by distancefilter
Event   info       : info( ARG ) 	    //for external components, not coap-observed

// Sonarmock
Event startHalt : startHalt(_)
Event stopHalt : stopHalt(_)
Event distance : distance(V)
Dispatch trigger : trigger(_)

// Led
Dispatch updateLed : updateLed(STATE) // STATE := ON | OFF | BLINK
Dispatch turnOnLed : turnOnLed(_)
Dispatch turnOffLed : turnOffLed(_)

// HaltEventsHandler
Dispatch halt : halt(_)
Dispatch resume : resume(_)

Context ctxwasteservice_test ip[host="localhost" port=8050]

CodedQActor sonaremittersimulator context ctxwasteservice_test className "wsSonar.sonarEmitterSimulator"
CodedQActor sonaremitterconcrete context ctxwasteservice_test className "wsSonar.sonarEmitterConcrete"
CodedQActor wsdatacleaner context ctxwasteservice_test className "wsSonar.dataCleaner"
CodedQActor wsdistanceFilter context ctxwasteservice_test className "wsSonar.distanceFilter"

QActor wasteservice context ctxwasteservice_test {
	[#
		var CurrentMaterial: ws.Material
		var CurrentQuantity: Float
		var Rejected: Boolean = false
	#]
	
	State init initial {
		println("\tWASTESERVICE | started.")
	}
	Transition t0 whenRequest storeRequest -> handleStoreRequest
		
	State idle {
		[# Rejected = false #]
		println("\tWASTESERVICE | idle - waiting for storeRequests")
	}
	Transition t0 whenRequest storeRequest -> handleStoreRequest
	
	State handleStoreRequest {
		onMsg(storeRequest : storeRequest(MATERIAL, QUANTITY)) {
			[#
				CurrentMaterial = ws.Material.valueOf(payloadArg(0))
				CurrentQuantity = payloadArg(1).toFloat()
			#]
			
			updateResource [# "wasteservice(handleStoreRequest_${CurrentMaterial.toString()}_$CurrentQuantity)" #]
			println("\tWASTESERVICE | received store request: $CurrentQuantity KG of $CurrentMaterial")
			
			if [# ws.WasteServiceStatusManager.checkIfDepositPossible(CurrentMaterial, CurrentQuantity) #] {
				[#
					ws.WasteServiceStatusManager.updateBox(CurrentMaterial, CurrentQuantity)
				#]
								
				updateResource [# "wasteservice(Plastic: ${ws.WasteServiceStatusManager.storedPlastic})" #]
				updateResource [# "wasteservice(Glass: ${ws.WasteServiceStatusManager.storedGlass})" #]
				request transporttrolley -m depositRequest : depositRequest($CurrentMaterial, $CurrentQuantity)
				
				println("\tWASTESERVICE | sended depositRequest to trolley")
			} else {
				[# Rejected = true #]
				updateResource [# "wasteservice(handleStoreRequest_loadRejected)" #]
				
				replyTo storeRequest with loadRejected : loadRejected(_)
				println("\tWASTESERVICE | rejected request from smartdevice")
			}
		}
	}
	Goto idle if [# Rejected #] else pickupWait
		
	State pickupWait {
		println("\tWASTSERVICE | pickupWait")
	}
	Transition t1 whenReply pickupDone -> handlePickupReply
	
	State handlePickupReply {
		onMsg(pickupDone : pickupDone(RESULT)) {
			[# var Res = payloadArg(0).toString() #]
			
			if [# Res == "OK" #] {
				updateResource [# "wasteservice(handlePickupReply_loadAccepted)" #]
				
				println("\tWASTESERVICE | arrived pickupDone reply OK")
				replyTo storeRequest with loadAccepted : loadAccepted(_)
			} else {
				updateResource [# "wasteservice(handlePickupReply_loadRejected)" #]
				
				println("\tWASTESERVICE | arrived pickupDone reply NO - FATAL ERROR")
				replyTo storeRequest with loadRejected : loadRejected(_)
			}
		}
	}
	Goto idle
}


QActor transporttrolley context ctxwasteservice_test {
	[#
		lateinit var Mat: ws.Material
		var Qty: Float = 0F
		var Error: Boolean = false
		var Loc: String = ""
	#]
	
	State init initial {
		println("\tTRANSPORTTROLLEY | started.")
	}
	Goto idle
	
	State idle {
		println("\tTRANSPORTTROLLEY | waiting for requests...")
	}
	Transition t0 whenRequest depositRequest -> handleDepositRequest
	
	State handleDepositRequest {
		updateResource [# "transporttrolley(handleDepositRequest)" #]
			
			onMsg(depositRequest : depositRequest(MATERIAL, QUANTITY)) {
				[#
					Mat = ws.Material.valueOf(payloadArg(0))
					Qty = payloadArg(1).toFloat()
				#]
			}
			
			updateResource [# "transporttrolley(moving_INDOOR)" #]
			println("\tTRANSPORTTROLLEY | moving to INDOOR")
			
			request trolleymover -m move : move(INDOOR)
	}
	Transition t1 whenReply moveDone -> arrivedIndoor
	
	State arrivedIndoor {
		[# var Answer: String = "" #]
		
		onMsg(moveDone : moveDone(ANSWER)) {
			[# Answer = payloadArg(0).toString() #]
		}
		
		if [# Answer == "OK" #] {
			updateResource [# "transporttrolley(arrived_INDOOR)" #]
			println("\tTRANSPORTTROLLEY | arrived to INDOOR")
			
			delay 2000
			
			updateResource [# "transporttrolley(pickupDone)" #]
			println("\tTRANSPORTTROLLEY | pickup done")
			
			replyTo depositRequest with pickupDone : pickupDone(OK)
		} else {
			println("\tTRANSPORTTROLLEY | failed pickup")
			[# Error = true #]
			
			replyTo depositRequest with pickupDone : pickupDone(NO)
		}
	}
	Goto moveToBox if [# Error == false #] else errorHandler
	
	State moveToBox {
		[# Loc = ws.utils.getLocationFromMaterialType(Mat) #]
		
		updateResource [# "transporttrolley(moving_$Loc)" #]
		println("\tTRANSPORTTROLLEY | moving to $Loc")
		
		request trolleymover -m move : move($Loc)
	}
	Transition t2 whenReply moveDone -> arrivedToBox
	
	State arrivedToBox {
		[# var Answer = "" #]
		
		onMsg(moveDone : moveDone(ANSWER)) {
			[# Answer = payloadArg(0).toString() #]
		}
		
		if [# Answer == "OK" #] {
			updateResource [# "transporttrolley(arrived_$Loc)" #]
			println("\tTRANSPORTTROLLEY | arrived to $Loc")
		} else {
			println("\tTRANSPORTTROLLEY | failed $Loc")
			[# Error = true #]			
		}
	}
	Goto doDeposit
	
	State doDeposit {
		println("\tTRANSPORTTROLLEY | doing the deposit of $Qty KG of $Mat")
		delay 1000
	}
	Goto depositDone
	
	State depositDone {
		[# Loc = "HOME" #]
		
		updateResource [# "transporttrolley(depositDone_$Mat)" #]
		println("\tTRANSPORTTROLLEY | deposit done of $Qty KG of $Mat")
				
		request trolleymover -m move : move($Loc)
	}
	Transition t3 whenRequest depositRequest -> handleDepositRequest
				  whenReply moveDone -> endWork
	
	State endWork {
		updateResource [# "transporttrolley(arrived_HOME)" #]
		println("\tTRANSPORTTROLLEY | arrived to HOME")
	}
	Transition t4 whenRequest depositRequest -> handleDepositRequest
	
	State errorHandler {
		updateResource [# "transporttrolley(ERROR)" #]
		println("\tTRANSPORTTROLLEY | error - resetting...")
		
		[#
			Qty = 0F
			Error = false
			Loc = ""
		#]
		
		request trolleymover -m move : move(HOME)
	}
	Transition t5 whenReply moveDone -> idle
	
}


QActor trolleymover context ctxwasteservice_test {
	[#
		var Actions = ""
		var Loc = ""
		var IsMoving = false
		SystemConfig.setTheConfiguration("SystemConfiguration")
		ws.pathing.planner.initAI()
		ws.pathing.planner.loadRoomMap("mapRoomEmpty")
	#]
	
	State init initial {
		println("\tTROLLEYMOVER | started.")
	}
	Goto idle
	
	State idle {
		println("\tTROLLEYMOVER | waiting...")
		[# IsMoving = false #]
	}
	Transition t0 whenRequest move -> handleMovement
	
	State handleMovement {
		onMsg(move : move(LOCATION)) {
			[# Loc = payloadArg(0) #]
		}
		
		println("\tTROLLEYMOVER | received movement to $Loc")
		
		if [# IsMoving #] {
			updateResource [# "trolleymover(handleMovement_stopPath)" #]
			println("\tTROLLEYMOVER | arrived move command when moving")
			
			request pather -m stopPath : stopPath(_)
		} else {
			[#
				var coord = ws.utils.getClosestCoordinate(ws.pathing.planner.get_curCoord(), Loc)
				ws.pathing.planner.setGoal(coord.x, coord.y)
				ws.pathing.planner.doPlan()
				Actions = ws.pathing.planner.getActionsString()
				IsMoving = true
			#]
			
			updateResource [# "trolleymover(handleMovement_$Loc)" #]
			println("\tTROLLEYMOVER | actions: $Actions")
			
			request pather -m doPath : doPath($Actions, trolleymover)
		}
	}
	Transition t1 whenReply doPathDone -> handlePathDone
				  whenReply doPathFail -> handlePathFail
				  whenReply stopAck -> handleInterruptedMovement
				  whenRequest move -> handleMovement
	
	State handleInterruptedMovement {
		onMsg(stopAck : stopAck(_)) {
			[# IsMoving = false #]
			updateResource [# "trolleymover(handleInterruptedMovement)" #]
		}
	}
	Goto handleMovement
	
	State handlePathDone {
		[# 
			IsMoving = false
			val pos = ws.pathing.planner.get_curCoord()
			ws.pathing.planner.showMap()
		#]
		updateResource [# "trolleymover(handlePathDone_$Loc, POS: ${pos.x}_${pos.y})" #]
		println("\tTROLLEYMOVER | arrived to $Loc")
		
		replyTo move with moveDone : moveDone(OK)
	}
	Goto idle
	
	State handlePathFail {
		[# IsMoving = false #]
		updateResource [# "trolleymover(handlePathFail_$Loc)" #]
		println("\tTROLLEYMOVER | path failed to $Loc")
		
		replyTo move with moveDone : moveDone(NO)
	}
	Goto idle
}

QActor pather context ctxwasteservice_test {
	[# 
		var CurMoveTodo = ""
		var Pathing = false 
	#]
	
	State init initial {
		[# CurMoveTodo = "" #]
		[# sysUtil.logMsgs = true #]
		[# Pathing = false #]
		println("\tPATHEXECUTOR | started")
	}
	Transition t0 whenRequest doPath -> doThePath
				  whenMsg halt -> handleHalt
	
	State doThePath {
		onMsg(doPath : doPath(P, C)) {
			[#
				val path = payloadArg(0)
				println(path)
				ws.pathing.pathut.setPath(path)
			#]
		}
		
		println("\tPATHEXECUTOR | pathTodo: ${ws.pathing.pathut.getPathTodo()}")
	}
	Goto nextMove
	
	State nextMove {
		[# CurMoveTodo = ws.pathing.pathut.nextMove() #]
		println("\tPATHEXECUTOR | curMoveTodo: $CurMoveTodo")
		[# Pathing = true #]
	}
	Goto endWorkOk if [# CurMoveTodo.length == 0 #] else doMove
			
	
	State handleStopPath {
		replyTo stopPath with stopAck : stopAck(_)
	}
	Goto init
	
	State doMove {
		[# ws.pathing.planner.updateMap(CurMoveTodo, "") #]
		delay 350
	}
	Goto doMoveW if [# CurMoveTodo == "w" #] else doMoveTurn
	
	State doMoveTurn {
		forward basicrobot -m cmd : cmd($CurMoveTodo)
	}
	Transition t1 whenTime 350 -> nextMove
				  whenMsg halt -> handleHalt
	
	State doMoveW {
		request basicrobot -m step : step(350)
		delay 350
	}
	Transition t2 whenMsg halt -> handleHalt
				  whenReply stepdone -> nextMove
				  whenEvent alarm -> handleAlarm
				  whenReply stepfail -> endWorkKo
				  whenRequest stopPath -> handleStopPath
				  
	State handleHalt {
		println("\tPATHEXECUTOR | stop...")
		updateResource [# "pather(halt_begin)" #]
	}
	Transition t1 whenMsg resume -> resumeFromHalt
	
	State resumeFromHalt {
		println("\tPATHEXECUTOR | resuming from halt")
		updateResource [# "pather(halt_end)" #]
	}
	Goto nextMove if [# Pathing #] else init 
	
	State handleAlarm {
		[# var PathTodo = ws.pathing.pathut.getPathTodo() #]
		println("\tPATHEXECUTOR | handleAlarm - pathTodo: $PathTodo")
	}
	
	State endWorkOk {
		println("\tPATHEXECUTOR | path done")
		replyTo doPath with doPathDone : doPathDone(OK)
	}
	Goto init
	
	State endWorkKo {
		[# var PathStillTodo = ws.pathing.pathut.getPathTodo() #]
		println("\tPATHEXECUTOR | path failure - PathStillTodo: $PathStillTodo")
		replyTo doPath with doPathFail : doPathFail($PathStillTodo)
	}
	Transition t3 whenEvent alarm -> handleAlarm
}

//-----------------------------------------------------------------------------------------------------------------------------
//-----------------------------------------------------------------------------------------------------------------------------
//-----------------------------------------------------------------------------------------------------------------------------

QActor trolleystateobserver context ctxwasteservice_test {
	[#
		var CurrentState = ws.LedState.OFF
		var LedState = ws.LedState.OFF
	#]
	
	State init initial {
		println("\tTROLLEYSTATEOBSERVER | started.")
		observeResource transporttrolley
		observeResource pather
	}
	Transition t0 whenMsg coapUpdate -> handleCoapUpdate 
	
	State handleCoapUpdate {
		onMsg(coapUpdate : coapUpdate(RESOURCE, VALUE)) {
			// filtraggio del messaggio
			[#
				var Resource = payloadArg(0)
				var Value = payloadArg(1)
				
				if(!Value.contains("pickupDone") && !Value.contains("handleDepositRequest")) 
					LedState = wsLed.LedUtils.getLedStatusFromCoap(Resource, Value)
			#]
			
			if [# !CurrentState.equals(LedState) #] {
				forward led -m updateLed : updateLed($LedState)
				[# CurrentState = LedState #]
			}
		}
	}
	Transition t0 whenMsg coapUpdate -> handleCoapUpdate
}

QActor led context ctxwasteservice_test {
	
	[# 
		var LedState = ws.LedState.OFF
		var Simulation: Boolean = true
		lateinit var Led: `it.unibo`.radarSystem22.domain.interfaces.ILed
	#]
	
	State init initial {
		println("\tLED | started.")
		updateResource [# "led(OFF)" #]
		[#
			SystemConfig.setTheConfiguration("SystemConfiguration")
			Simulation = SystemConfig.sonar["simulation"] as Boolean
			
			wsLed.LedUtils.createLed(Simulation, Simulation)
		#]
	}
	Transition t0 whenMsg updateLed -> handleEvent
				  whenMsg turnOnLed -> turnOnMsg
				  whenMsg turnOffLed -> turnOffMsg
				  
	State idle {
		
	}
	Transition t0 whenMsg updateLed -> handleEvent
				  whenMsg turnOnLed -> turnOnMsg
				  whenMsg turnOffLed -> turnOffMsg
	
	State turnOnMsg {
		[#
			wsLed.LedUtils.printLedState("\tLED | LED ON")
			wsLed.LedUtils.turnOn()
		#]
	}
	Goto idle
	
	State turnOffMsg {
		[#
			wsLed.LedUtils.printLedState("\tLED | LED OFF")
			wsLed.LedUtils.turnOff()
		#]
	}
	Goto idle
	
	State handleEvent {
		onMsg(updateLed : updateLed(STATE)) {
			[# LedState = ws.LedState.valueOf(payloadArg(0)) #]
			
			updateResource [# "led($LedState)" #]
		}
	}
	Goto blinkLedOn if [# LedState.equals(ws.LedState.BLINKING) #] else notBlink 
		
	State notBlink {}
	Goto on if [# LedState.equals(ws.LedState.ON) #] else off 
	
	State on {
		[# 
			wsLed.LedUtils.printLedState("\tLED | led ON")
			wsLed.LedUtils.turnOn()
		#]
	}
	Transition t0 whenMsg updateLed -> handleEvent
	
	State off {
		[#
			wsLed.LedUtils.printLedState("\tLED | led OFF")
			wsLed.LedUtils.turnOff()
		#]
	}
	Transition t0 whenMsg updateLed -> handleEvent
	
	State blinkLedOn {
		
		[# 
			wsLed.LedUtils.printLedState("\tLED | led Blink")
			wsLed.LedUtils.turnOn()
		#]
	}
	Transition t0 whenTime 300 -> blinkLedOff
				  whenMsg updateLed -> handleEvent
	
	State blinkLedOff {
		[# 
			wsLed.LedUtils.printLedState("\tLED | led Blink")
			wsLed.LedUtils.turnOff()
		#]
	}
	Transition t0 whenTime 300 -> blinkLedOn
				  whenMsg updateLed -> handleEvent
				  
}


QActor sonar context ctxwasteservice_test {
	[#
		var Simulation: Boolean = false
		var Log: Boolean = false
	#]
	
	State init initial {
		println("\tSONAR | Started.")
		[#
			SystemConfig.setTheConfiguration("SystemConfiguration")
			Simulation = SystemConfig.sonar["simulation"] as Boolean
			Log = SystemConfig.sonar["log"] as Boolean
		#]
		println("\tSONAR | simulation is $Simulation")
		
		run wsSonar.sonarSystemBuilder.createSonar(Simulation, Log)
	}
}

QActor halteventshandler context ctxwasteservice_test {
	
	State init initial {
		println("\tHALTEVENTSHANDLER | started.")
	}
	Goto idle
	
	State idle {
		println("\tHALTEVENTSHANDLER | waiting for startHalt Event...")
	}
	Transition t0 whenEvent startHalt -> sendHalt
	
	State sendHalt {
		println("\tHALTEVENTSHANDLER | received startHalt Event, sending notification to pather...")
		
		forward pather -m halt : halt(_)
	}	
	Transition t0 whenEvent stopHalt -> sendResume
	
	State sendResume {
		println("\tHALTEVENTSHANDLER | received stopHalt Event, sending notification to pather...")
		
		forward pather -m resume : resume(_)
	}	
	Goto idle
}

//-----------------------------------------------------------------------------------------------------------------------------
//-----------------------------------------------------------------------------------------------------------------------------
//-----------------------------------------------------------------------------------------------------------------------------

CodedQActor datacleaner    context ctxwasteservice_test className "rx.dataCleaner"
CodedQActor distancefilter context ctxwasteservice_test className "rx.distanceFilter"
 
QActor basicrobot context ctxwasteservice_test {
[#
  var StepTime      = 0L
  var StartTime     = 0L     
  var Duration      = 0L  
  var RobotType     = "" 
  var CurrentMove   = "unkknown"
#]  
 	State s0 initial { 	      
 		discardMsg Off  //WE want receive any msg
 		//[# unibo.comm22.utils.CommSystemConfig.tracing = false #]  //tracing at unibo.comm22 level
		println("basicrobot | START")	
 		qrun unibo.robot.robotSupport.create(myself,"basicrobotConfig.json")	
 		[# RobotType = unibo.robot.robotSupport.robotKind #]
 		delay 1000  //give to the realsonar the time to start
        if[# RobotType != "virtual" #]{
        	[# var robotsonar = context!!.hasActor("realsonar")  
        	   if(robotsonar != null) unibo.robot.robotSupport.createSonarPipe(robotsonar) 
        	#] 
  		}//The Virtual robot sonar is created in virtualrobotSupport2021
 
  		//run unibo.robot.robotSupport.move( "a" )    //synch
 		//run unibo.robot.robotSupport.move( "d" )	//synch
    		//run unibo.robot.robotSupport.move( "w" )    //asynch
 		updateResource [# "basicrobot(start)" #]
 	} 
	Goto work
	
	State work{ 
		println("basicrobot  | waiting .................. ")  
	} 
	Transition t1   whenMsg     cmd       -> execcmd
					whenRequest step      -> doStep			 
					whenMsg    obstacle   -> handleObstacle  //in virtualrobot caused by the move w/s
					//whenEvent sonar       -> handleSonar
				  	whenMsg     end       -> endwork			  
	
	State execcmd{
		printCurrentMessage
		onMsg( cmd : cmd(MOVE) ){
  			//activate the motors  
  			[# CurrentMove = payloadArg(0) #]
			run unibo.robot.robotSupport.move( payloadArg(0 ) )
			updateResource [# "moveactivated(${payloadArg(0)})" #]
		}
	 }
	 Goto work   
	 
	State handleObstacle{
		//println("basicrobotttttttttt | handleObstacle ${CurrentMove}")	
		//run unibo.robot.robotSupport.move( "h" ) //non importa 
		//printCurrentMessage
		updateResource [# "obstacle(${CurrentMove})" #]
		//JUNE22: behavior embedded in VirtualrobotSupport2021
		/* 
		if[# CurrentMove == "w" #]{
		//back to avoid emission of obstacle again if real robot moving forward !!!
		//if[# RobotType != "virtual" #]{	
			run unibo.robot.robotSupport.move( "s" )
			delay 100 
			run unibo.robot.robotSupport.move( "h" ) 
 		}*/
 		//emit info : info( obstacledoing(w) )
	}
	Goto work  
 
	State handleSonar{
		printCurrentMessage
	}
	Goto work
		
   	State doStep{ 
 		printCurrentMessage  
		onMsg( step : step( T ) ){  
			[#	StepTime = payloadArg(0).toLong() 	#]  
			updateResource [# "step(${StepTime})" #]
  		}  
        memoCurrentTime StartTime  
        println("basicrobot | doStep StepTime =$StepTime  ")        
        run unibo.robot.robotSupport.move( "w" )  //moves a real robot forever !!!
	}  
	Transition t0 
		whenTimeVar StepTime  -> stepDone  	 
 		whenMsg  obstacle     -> stepFail		
    	 
	
	State stepDone{   
 		run unibo.robot.robotSupport.move( "h" )  //stop the real robot already done ???
		updateResource [# "stepDone($StepTime)" #]
   		//emit info : info( stepdone($StepTime) )
   		replyTo step with stepdone : stepdone(ok)
		println("basicrobot | stepDone reply done")
  	}
	Goto work  
 
	State stepFail{  	 	
		setDuration Duration from StartTime
		run unibo.robot.robotSupport.move( "h" )  //stop the (real) robot
		//[# var TunedDuration =  Duration * 5 / 6 #]
		//[# var TunedDuration   = kotlin.math.round( (StepTime - Duration) * 15 / 100 ) #]
		[# var TunedDuration   =  ((StepTime - Duration) * 15 / 100).toLong()   #]
		println("basicrobot | stepFail duration=$Duration TunedDuration=$TunedDuration")
			run unibo.robot.robotSupport.move( "s" )
			delayVar TunedDuration 
			run unibo.robot.robotSupport.move( "h" ) 
 		updateResource [# "stepFail($Duration)" #] 
 		//emit info : info( stepFail($Duration) )
 		replyTo step with stepfail : stepfail($Duration, obst)
    }
	Goto work
	
	State endwork{ 
		updateResource [# "basicrobot(end)" #]	 		
 		terminate 1
	}   
 
}

QActor envsonarhandler context ctxwasteservice_test {
 	State s0 initial { 	 
 		println("envsonarhandler | (RE)START")	 		
	}	
	Transition t1 
	  whenMsg cmd     -> dontcare
	  whenEvent sonar -> handleEnvSonar

	State dontcare{
		printCurrentMessage
	}
	Goto s0
		
	State handleEnvSonar{
		printCurrentMessage
		/* 
		onMsg( sonar : sonar(D,T)){ 
			println("envsonarhandler | sonar(${payloadArg(0)}) ")
		}*/
	}
	Transition t1 whenEvent sonar -> handleEnvSonar  
}