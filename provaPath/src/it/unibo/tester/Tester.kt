/* Generated by AN DISI Unibo */ 
package it.unibo.tester

import it.unibo.kactor.*
import alice.tuprolog.*
import kotlinx.coroutines.CoroutineScope
import kotlinx.coroutines.delay
import kotlinx.coroutines.launch
import kotlinx.coroutines.runBlocking
	
class Tester ( name: String, scope: CoroutineScope  ) : ActorBasicFsm( name, scope ){

	override fun getInitialState() : String{
		return "init"
	}
	override fun getBody() : (ActorBasicFsm.() -> Unit){
		val interruptedStateTransitions = mutableListOf<Transition>()
		
				var Actions: String = ""
		return { //this:ActionBasciFsm
				state("init") { //this:State
					action { //it:State
						println("LUIGI")
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition( edgeName="goto",targetState="doPath", cond=doswitch() )
				}	 
				state("doPath") { //this:State
					action { //it:State
						
									planner.initAI()
									planner.loadRoomMap("mapWithObst2019")
									planner.setGoal(4, 4)
									planner.doPlan()
									Actions = planner.getActionsString()			
						println("$Actions")
						println("doexplore starts $Actions")
						request("dopath", "dopath($Actions,tester)" ,"pathexec" )  
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition(edgeName="t00",targetState="end",cond=whenReply("dopathdone"))
					transition(edgeName="t01",targetState="handelPathFailure",cond=whenReply("dopathfail"))
				}	 
				state("handelPathFailure") { //this:State
					action { //it:State
						println("$name in ${currentState.stateName} | $currentMsg")
						emit("alarm", "alarm(obstacle)" ) 
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
				}	 
				state("end") { //this:State
					action { //it:State
						println("BYE")
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
				}	 
			}
		}
}
