System wasteservice


Request storeRequest : storeRequest(MATERIAL, QUANTITY)
Reply loadAccepted : loadAccepted(_)
Reply loadRejected : loadRejected(_)

Context ctxrequest_wasteservice ip [host="localhost" port=8010]

QActor wasteservice context ctxrequest_wasteservice {
	
		[#
			var occupiedGlass = 0.0
			var occupiedPlastic = 0.0
			var currentMaterial = ""
			var currentQuantity = 0.0
			var MAXPB = 100.0
			var MAXGP = 100.0
		#]
	
	State init initial {
		printCurrentMessage
	}
	Transition t1 whenRequest storeRequest -> handleRequest
	
	
	State handleRequest {
		printCurrentMessage
		
		onMsg(storeRequest : storeRequest(MATERIAL, QUANTITY)) {
			[#
				currentMaterial = payloadArg(0)
				currentQuantity = payloadArg(1).toDouble()
			#]
			
			println("Received request - $currentMaterial - $currentQuantity KG - OccupiedGlassKG: $occupiedGlass - OccupiedPlasticKG: $occupiedPlastic")
			
			if [# currentMaterial == "glass" && occupiedGlass + currentQuantity < MAXGP || currentMaterial == "plastic" && occupiedPlastic + currentQuantity < MAXPB #] {
				replyTo storeRequest with loadAccepted : loadAccepted(_)
			} else {
				replyTo storeRequest with loadRejected : loadRejected(_)
			}
		}		
	}	
	Goto init
	
}

QActor wastetruck context ctxrequest_wasteservice {
	
	[#
		var Material = ""
		var Qty = 0.0
	#]
	
	State init initial {
		printCurrentMessage
		
		[#
			Material = if(kotlin.random.Random.nextBoolean()) "glass" else "plastic"
			Qty = kotlin.random.Random.nextDouble(100.0, 120.0)
		#]
		
		println("WasteTruck with $Qty KG of $Material")
		
		request wasteservice -m storeRequest : storeRequest($Material, $Qty)
	}
	Transition t1 whenReply loadAccepted -> handleAccepted
				  whenReply loadRejected -> handleRejected
				  
	State handleAccepted {
		printCurrentMessage
		println("Store Accepted")		
	}
	Goto termination
	
	State handleRejected {
		printCurrentMessage
		println("Store Rejected")
	}
	Goto termination
	
	State termination {
		printCurrentMessage
		println("Termination")
	}
}