/* Generated by AN DISI Unibo */ 
package it.unibo.pathcaller

import it.unibo.kactor.*
import alice.tuprolog.*
import kotlinx.coroutines.CoroutineScope
import kotlinx.coroutines.delay
import kotlinx.coroutines.launch
import kotlinx.coroutines.runBlocking
	
class Pathcaller ( name: String, scope: CoroutineScope  ) : ActorBasicFsm( name, scope ){

	override fun getInitialState() : String{
		return "s0"
	}
	override fun getBody() : (ActorBasicFsm.() -> Unit){
		val interruptedStateTransitions = mutableListOf<Transition>()
		return { //this:ActionBasciFsm
				state("s0") { //this:State
					action { //it:State
						println("Pathcaller started")
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition( edgeName="goto",targetState="doPath", cond=doswitch() )
				}	 
				state("doPath") { //this:State
					action { //it:State
						 val PathTodo =  "wwlwlwwlwl"   
						println("doexplore starts $PathTodo")
						request("dopath", "dopath($PathTodo,pathcaller)" ,"pathexecutor" )  
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition(edgeName="t08",targetState="end",cond=whenReply("dopathdone"))
					transition(edgeName="t09",targetState="handelPathFailure",cond=whenReply("dopathfail"))
				}	 
				state("handelPathFailure") { //this:State
					action { //it:State
						println("$name in ${currentState.stateName} | $currentMsg")
						emit("alarm", "alarm(obstacle)" ) 
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
				}	 
				state("end") { //this:State
					action { //it:State
						println("BYE")
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
				}	 
			}
		}
}
