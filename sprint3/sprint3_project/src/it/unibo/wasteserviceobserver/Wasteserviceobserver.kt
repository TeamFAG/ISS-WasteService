/* Generated by AN DISI Unibo */ 
package it.unibo.wasteserviceobserver

import it.unibo.kactor.*
import alice.tuprolog.*
import kotlinx.coroutines.CoroutineScope
import kotlinx.coroutines.delay
import kotlinx.coroutines.launch
import kotlinx.coroutines.runBlocking
	
class Wasteserviceobserver ( name: String, scope: CoroutineScope  ) : ActorBasicFsm( name, scope ){

	override fun getInitialState() : String{
		return "init"
	}
	override fun getBody() : (ActorBasicFsm.() -> Unit){
		val interruptedStateTransitions = mutableListOf<Transition>()
		
				var Material = ""
				var Quantity: Float
		return { //this:ActionBasciFsm
				state("init") { //this:State
					action { //it:State
						println("	WASTESERVICEOBSERVER | started.")
						CoapObserverSupport(myself, "localhost","8050","ctxwasteservice_test","wasteservice")
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition(edgeName="t026",targetState="handleCoapUpdate",cond=whenDispatch("coapUpdate"))
				}	 
				state("handleCoapUpdate") { //this:State
					action { //it:State
						if( checkMsgContent( Term.createTerm("coapUpdate(RESOURCE,VALUE)"), Term.createTerm("coapUpdate(RESOURCE,VALUE)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
												
												val Resource = payloadArg(0)
												val Value = payloadArg(1)
												println("COAPPPPPPPPPPPPPPPPPPPP | $Value")
												val (mat, qty) = ws.ObserversUtils.getContainersStateFromCoapUpdate(Resource, Value)
												Material = mat
												Quantity = qty
								forward("updateMaterial", "updateMaterial($Material,$Quantity)" ,"guiupdater" ) 
						}
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition(edgeName="t027",targetState="handleCoapUpdate",cond=whenDispatch("coapUpdate"))
				}	 
			}
		}
}
