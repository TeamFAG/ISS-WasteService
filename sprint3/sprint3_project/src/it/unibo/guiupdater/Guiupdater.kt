/* Generated by AN DISI Unibo */ 
package it.unibo.guiupdater

import it.unibo.kactor.*
import alice.tuprolog.*
import kotlinx.coroutines.CoroutineScope
import kotlinx.coroutines.delay
import kotlinx.coroutines.launch
import kotlinx.coroutines.runBlocking
	
class Guiupdater ( name: String, scope: CoroutineScope  ) : ActorBasicFsm( name, scope ){

	override fun getInitialState() : String{
		return "init"
	}
	override fun getBody() : (ActorBasicFsm.() -> Unit){
		val interruptedStateTransitions = mutableListOf<Transition>()
		 
				var LedState = ws.LedState.OFF
				var GlassQty: Float = 0F
				var PlasticQty: Float = 0F
				var RobotState: String = "HOME - Idle"
				var CurrentMaterial: ws.Material
				var CurrentQuantity: Float
				SystemConfig.setTheConfiguration("SystemConfiguration")
				var GuiHost = SystemConfig.guiEP["host"] as String
				var GuiPort = SystemConfig.guiEP["port"] as String
				var GuiPath = SystemConfig.guiEP["path"] as String
				wsWebSupport.WsDispatcher.create(this, GuiHost, GuiPort, GuiPath)
		return { //this:ActionBasciFsm
				state("init") { //this:State
					action { //it:State
						println("	GUIUPDATER | started.")
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition( edgeName="goto",targetState="idle", cond=doswitch() )
				}	 
				state("idle") { //this:State
					action { //it:State
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition(edgeName="t039",targetState="updLedHandler",cond=whenDispatch("updateLed"))
					transition(edgeName="t040",targetState="updMaterialHandler",cond=whenDispatch("updateMaterial"))
					transition(edgeName="t041",targetState="updRobotHandler",cond=whenDispatch("updateRobotState"))
				}	 
				state("updLedHandler") { //this:State
					action { //it:State
						if( checkMsgContent( Term.createTerm("updateLed(STATE)"), Term.createTerm("updateLed(STATE)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								 
												LedState = ws.LedState.valueOf(payloadArg(0)) 
												var GuiState = wsWebSupport.GuiStatus(PlasticQty, GlassQty, LedState, RobotState)
												wsWebSupport.WsDispatcher.dispatchGuiUpdate(GuiState)
								updateResourceRep( "guiupdater(LED_$LedState)"  
								)
						}
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition( edgeName="goto",targetState="idle", cond=doswitch() )
				}	 
				state("updMaterialHandler") { //this:State
					action { //it:State
						if( checkMsgContent( Term.createTerm("updateMaterial(MATERIAL,QUANTITY)"), Term.createTerm("updateMaterial(MATERIAL,QUANTITY)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								
												CurrentMaterial = ws.Material.valueOf(payloadArg(0))
												CurrentQuantity = payloadArg(1).toFloat()
								if(  CurrentMaterial.equals(ws.Material.GLASS)  
								 ){ GlassQty = CurrentQuantity  
								}
								else
								 { PlasticQty = CurrentQuantity  
								 }
								
												var GuiState = wsWebSupport.GuiStatus(PlasticQty, GlassQty, LedState, RobotState)
												wsWebSupport.WsDispatcher.dispatchGuiUpdate(GuiState)
								updateResourceRep( "guiupdater(${CurrentMaterial}_$CurrentQuantity)"  
								)
								println("	GUIUPDATER | $CurrentMaterial UPDATE - $CurrentQuantity")
						}
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition( edgeName="goto",targetState="idle", cond=doswitch() )
				}	 
				state("updRobotHandler") { //this:State
					action { //it:State
						if( checkMsgContent( Term.createTerm("updateRobotState(STATE)"), Term.createTerm("updateRobotState(STATE)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								
												RobotState = payloadArg(0).toString()
												println("GUIGUIGUIGUIGUIGUIGUI $RobotState")
												var GuiState = wsWebSupport.GuiStatus(PlasticQty, GlassQty, LedState, RobotState)
												wsWebSupport.WsDispatcher.dispatchGuiUpdate(GuiState)
								updateResourceRep( "guiupdater(TROLLEY_$RobotState)"  
								)
								println("	GUIUPDATER | TROLLEY UPDATE - $RobotState")
						}
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition( edgeName="goto",targetState="idle", cond=doswitch() )
				}	 
			}
		}
}
