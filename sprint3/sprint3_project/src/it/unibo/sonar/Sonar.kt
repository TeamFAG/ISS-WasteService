/* Generated by AN DISI Unibo */ 
package it.unibo.sonar

import it.unibo.kactor.*
import alice.tuprolog.*
import kotlinx.coroutines.CoroutineScope
import kotlinx.coroutines.delay
import kotlinx.coroutines.launch
import kotlinx.coroutines.runBlocking
	
class Sonar ( name: String, scope: CoroutineScope  ) : ActorBasicFsm( name, scope ){

	override fun getInitialState() : String{
		return "init"
	}
	override fun getBody() : (ActorBasicFsm.() -> Unit){
		val interruptedStateTransitions = mutableListOf<Transition>()
		
				var Simulation: Boolean = false
				var Log: Boolean = false
		return { //this:ActionBasciFsm
				state("init") { //this:State
					action { //it:State
						println("	SONAR | Started.")
						
									SystemConfig.setTheConfiguration("SystemConfiguration")
									Simulation = SystemConfig.sonar["simulation"] as Boolean
									Log = SystemConfig.sonar["log"] as Boolean
						println("	SONAR | simulation is $Simulation")
						wsSonar.sonarSystemBuilder.createSonar( Simulation, Log  )
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
				}	 
			}
		}
}
