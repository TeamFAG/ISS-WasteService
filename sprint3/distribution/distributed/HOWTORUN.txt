###########################################################
#                          PC                             #
###########################################################

1. Preparare l'immagine da pushare su raspberry

    Nel file sprint3_project.pl cambiare l'ip del ctxrasp con il vero ip del rasp, e l'ip del ctxtrolley con l'ip del pc,
    inoltre commentare il ctxwasteservice, quindi:

        % context(ctxwasteservice, "wasteservice",  "TCP", "8050").
        context(ctxtrolley, "192.168.1.109",  "TCP", "8060").
        context(ctxrasp, "192.168.1.122",  "TCP", "8070").

    Per buildare, taggare e pushare su dockerhub (in una repo pubblica) l'immagine del rasp lanciare il comando:

        docker buildx build --platform linux/arm/v7 --rm --tag rasp --load -f Dockerfile-ctxrasp ../..
        docker tag rasp username/rasp:rasp
        docker push username/rasp:rasp

2. Buildare e runnare il sistema del pc
    
    Nel file SistemConfig.json cambiare l'ip del rasp con il vero ip del rasp
    Nel file sprint3_project.pl cambiare l'ip del ctxrasp con il vero ip del rasp
    Quindi dovrà essere così (con i giusti ip):

        context(ctxwasteservice, "wasteservice",  "TCP", "8050").
        context(ctxtrolley, "trolley",  "TCP", "8060").
        context(ctxrasp, "192.168.1.122",  "TCP", "8070").

    Per eseguire il sistema, lanciare il comando:

        docker-compose -f docker-compose.yml up

###########################################################
#                          raspberry                      #
###########################################################

Lanciare il seguente comando per pullare l'immagine del rasp (è già in una repo pubblica, quindi pullabile da tutti senza doverlo buildare come scritto sopra)

    docker pull federicoand98/rasp:rasp

Una volta pullato, per eseguire l'immagine lanciare il comando:

    docker run -i -t --rm --privileged federicoand98/rasp:rasp
