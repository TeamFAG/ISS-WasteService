/* Generated by AN DISI Unibo */ 
package it.unibo.transporttrolley

import it.unibo.kactor.*
import alice.tuprolog.*
import kotlinx.coroutines.CoroutineScope
import kotlinx.coroutines.delay
import kotlinx.coroutines.launch
import kotlinx.coroutines.runBlocking
	
class Transporttrolley ( name: String, scope: CoroutineScope  ) : ActorBasicFsm( name, scope ){

	override fun getInitialState() : String{
		return "init"
	}
	override fun getBody() : (ActorBasicFsm.() -> Unit){
		val interruptedStateTransitions = mutableListOf<Transition>()
		 var LOC: String = ""  
		return { //this:ActionBasciFsm
				state("init") { //this:State
					action { //it:State
						println("	TRANSPORTTROLLEY | started.")
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition( edgeName="goto",targetState="idle", cond=doswitch() )
				}	 
				state("idle") { //this:State
					action { //it:State
						println("	TRANSPORTTROLLEY | waiting...")
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition(edgeName="t00",targetState="handleMovment",cond=whenDispatch("simulate"))
				}	 
				state("handleMovment") { //this:State
					action { //it:State
						if( checkMsgContent( Term.createTerm("simulate(LOCATION)"), Term.createTerm("simulate(LOCATION)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								
												LOC = payloadArg(0)
						}
						request("move", "move(LOC)" ,"trolleymover" )  
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition(edgeName="t11",targetState="handleMovment",cond=whenDispatch("simulate"))
					transition(edgeName="t12",targetState="handleMoveDone",cond=whenReply("moveDone"))
				}	 
				state("handleMoveDone") { //this:State
					action { //it:State
						println("	TRANSPORTTROLLEY | moveDone.")
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition( edgeName="goto",targetState="idle", cond=doswitch() )
				}	 
			}
		}
}
