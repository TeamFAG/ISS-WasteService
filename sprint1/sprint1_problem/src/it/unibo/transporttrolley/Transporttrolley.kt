/* Generated by AN DISI Unibo */ 
package it.unibo.transporttrolley

import it.unibo.kactor.*
import alice.tuprolog.*
import kotlinx.coroutines.CoroutineScope
import kotlinx.coroutines.delay
import kotlinx.coroutines.launch
import kotlinx.coroutines.runBlocking
	
class Transporttrolley ( name: String, scope: CoroutineScope  ) : ActorBasicFsm( name, scope ){

	override fun getInitialState() : String{
		return "init"
	}
	override fun getBody() : (ActorBasicFsm.() -> Unit){
		val interruptedStateTransitions = mutableListOf<Transition>()
		 
				var lateinit Mat
				var lateinit Qty 
		return { //this:ActionBasciFsm
				state("init") { //this:State
					action { //it:State
						println("	TRANSPORTTROLLEY | started...")
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition( edgeName="goto",targetState="idle", cond=doswitch() )
				}	 
				state("idle") { //this:State
					action { //it:State
						println("	TRANSPORTROLLEY | waiting for requests...")
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition(edgeName="t03",targetState="handleDepositRequest",cond=whenRequest("depositRequest"))
				}	 
				state("handleDepositRequest") { //this:State
					action { //it:State
						println("	TRANSPORTTROLLEY | moving to indoor")
						delay(1000) 
						println("	TRANSPORTTROLLEY | arrived to indoor")
						if( checkMsgContent( Term.createTerm("depositRequest(MATERIAL,QUANTITY)"), Term.createTerm("depositRequest(MATERIAL,QUANTITY)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								 Mat = ws.Material.valueOf(payloadArg(0))  
								 Qty = payloadArg(0)  
								answer("depositRequest", "pickupDone", "pickupDone(ok)","wasteservice"   )  
						}
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition( edgeName="goto",targetState="moveToGlassBox", cond=doswitchGuarded({ Mat == ws.Material.GLASS  
					}) )
					transition( edgeName="goto",targetState="moveToPlasticBox", cond=doswitchGuarded({! ( Mat == ws.Material.GLASS  
					) }) )
				}	 
				state("moveToPlasticBox") { //this:State
					action { //it:State
						forward("cmd", "cmd(_)" ,"basicrobot" ) 
						request("step", "step(500)" ,"basicrobot" )  
						println("	TRANSPORT TROLLEY | moving to PlasticBox")
						delay(1000) 
						println("	TRANSPORT TROLLEY | arrived to PlasticBox")
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition( edgeName="goto",targetState="doDeposit", cond=doswitch() )
				}	 
				state("moveToGlassBox") { //this:State
					action { //it:State
						forward("cmd", "cmd(_)" ,"basicrobot" ) 
						request("step", "step(500)" ,"basicrobot" )  
						println("	TRANSPORT TROLLEY | moving to GlassBox")
						delay(1000) 
						println("	TRANSPORT TROLLEY | arrived to GlassBox")
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition( edgeName="goto",targetState="doDeposit", cond=doswitch() )
				}	 
				state("doDeposit") { //this:State
					action { //it:State
						forward("cmd", "cmd(_)" ,"basicrobot" ) 
						request("step", "step(500)" ,"basicrobot" )  
						println("	TRANSPORT TROLLEY | doing the deposit")
						delay(500) 
						println("	TRANSPORT TROLLEY | deposit done")
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition( edgeName="goto",targetState="endRequest", cond=doswitch() )
				}	 
				state("endRequest") { //this:State
					action { //it:State
						forward("cmd", "cmd(_)" ,"basicrobot" ) 
						request("step", "step(500)" ,"basicrobot" )  
						println("	TRANSPORTTROLLEY | moving back to home")
						delay(1000) 
						println("	TRANSPORTTROLLEY | arrived to home")
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition(edgeName="t14",targetState="handleDepositRequest",cond=whenRequest("depositRequest"))
				}	 
			}
		}
}
