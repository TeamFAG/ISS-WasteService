System demo_wasteservice

// Smartdevice
Request storeRequest : storeRequest(MATERIAL, QUANTITY)
Reply loadAccepted : loadAccepted(_)
Reply loadRejected : loadRejected(_)

// Wasteservice
Request depositRequest : depositRequest(MATERIAL, QUANTITY)
Reply pickupDone : pickupDone(RESULT)

// Transporttrolley
Request move : move(LOCATION)
Reply moveDone : moveDone(ANSWER)

// Trolleymover
Request doPath : doPath(PATH, OWNER)
Reply doPathDone : doPathDone(ARG)
Reply doPathFail : doPathFail(ARG)
Request stopPath : stopPath(_)
Reply stopAck : stopAck(_)

// Basicrobot
Dispatch cmd : cmd(MOVE)
Request step : step(TIME)
Reply stepdone : stepdone(V)
Reply stepfail : stepfail(V)
Event alarm : alarm(X)

Context ctxbasicrobot ip[host="localhost" port=8020]
Context ctxwasteservice ip[host="localhost" port=8050]
Context ctxtrolley ip[host="localhost" port=8060]
//Context ctxsmartdevice ip[host="127.0.0.1" port=8040]

ExternalQActor basicrobot context ctxbasicrobot

/*
QActor smartdevicemock context ctxsmartdevice {
	
	[#
		var Material: ws.Material
		var Qty: Double
	#]
	
	State init initial {
		[#
			Material = if(kotlin.random.Random.nextBoolean()) ws.Material.GLASS else ws.Material.PLASTIC
			Qty = kotlin.random.Random.nextDouble(10.0, 50.0)
		#]
		
		println("\tSMARTDEVICE | with $Qty KG of $Material")
	
		request wasteservice -m storeRequest : storeRequest($Material, $Qty)	
		
		delay 22000
		
		[#
			Material = if(kotlin.random.Random.nextBoolean()) ws.Material.GLASS else ws.Material.PLASTIC
			Qty = kotlin.random.Random.nextDouble(10.0, 50.0)
		#]
		
		request wasteservice -m storeRequest : storeRequest($Material, $Qty)	
	}
	Transition t0 whenReply loadAccepted -> handleAccepted
				  whenReply loadRejected -> handleRejected

	State handleAccepted {
		println("\tSMARTDEVICE | store accepted")
	}
	Goto termination
	
	State handleRejected {
		println("\tSMARTDEVICE | store rejected")
	}	
	Goto termination
	
	State termination {
		println("\tSMARTDEVICE | going away...")
	}		  
}
*/

QActor wasteservice context ctxwasteservice {
	[#
		var CurrentMaterial: ws.Material
		var CurrentQuantity: Float
		var Rejected: Boolean = false
	#]
	
	State init initial {
		println("\tWASTESERVICE | started.")
	}
	Transition t0 whenRequest storeRequest -> handleStoreRequest
		
	State idle {
		[# Rejected = false #]
		println("\tWASTESERVICE | idle - waiting for storeRequests")
	}
	Transition t0 whenRequest storeRequest -> handleStoreRequest
	
	State handleStoreRequest {
		onMsg(storeRequest : storeRequest(MATERIAL, QUANTITY)) {
			[#
				CurrentMaterial = ws.Material.valueOf(payloadArg(0))
				CurrentQuantity = payloadArg(1).toFloat()
			#]
			
			updateResource [# "wasteservice(handleStoreRequest_${CurrentMaterial.toString()}_$CurrentQuantity)" #]
			println("\tWASTESERVICE | received store request: $CurrentQuantity KG of $CurrentMaterial")
			
			if [# ws.WasteServiceStatusManager.checkIfDepositPossible(CurrentMaterial, CurrentQuantity) #] {
				[#
					ws.WasteServiceStatusManager.updateBox(CurrentMaterial, CurrentQuantity)
				#]
								
				updateResource [# "wasteservice(Plastic: ${ws.WasteServiceStatusManager.storedPlastic})" #]
				updateResource [# "wasteservice(Glass: ${ws.WasteServiceStatusManager.storedGlass})" #]
				request transporttrolley -m depositRequest : depositRequest($CurrentMaterial, $CurrentQuantity)
				
				println("\tWASTESERVICE | sended depositRequest to trolley")
			} else {
				[# Rejected = true #]
				updateResource [# "wasteservice(handleStoreRequest_loadRejected)" #]
				
				replyTo storeRequest with loadRejected : loadRejected(_) /*caller==smartdevicemock*/
				println("\tWASTESERVICE | rejected request from smartdevice")
			}
		}
	}
	Goto idle if [# Rejected #] else pickupWait
		
	State pickupWait {
		println("\tWASTSERVICE | pickupWait")
	}
	Transition t1 whenReply pickupDone -> handlePickupReply
	
	State handlePickupReply {
		onMsg(pickupDone : pickupDone(RESULT)) {
			[# var Res = payloadArg(0).toString() #]
			
			if [# Res == "OK" #] {
				updateResource [# "wasteservice(handlePickupReply_loadAccepted)" #]
				
				println("\tWASTESERVICE | arrived pickupDone reply OK")
				replyTo storeRequest with loadAccepted : loadAccepted(_) /*caller==smartdevicemock*/
			} else {
				updateResource [# "wasteservice(handlePickupReply_loadRejected)" #]
				
				println("\tWASTESERVICE | arrived pickupDone reply NO - FATAL ERROR")
				replyTo storeRequest with loadRejected : loadRejected(_) /*caller==smartdevicemock*/
			}
		}
	}
	Goto idle
}


QActor transporttrolley context ctxtrolley {
	[#
		lateinit var Mat: ws.Material
		var Qty: Float = 0F
		var Error: Boolean = false
		var Loc: String = ""
	#]
	
	State init initial {
		println("\tTRANSPORTTROLLEY | started.")
	}
	Goto idle
	
	State idle {
		println("\tTRANSPORTTROLLEY | waiting for requests...")
	}
	Transition t0 whenRequest depositRequest -> handleDepositRequest
	
	State handleDepositRequest {
		updateResource [# "transporttrolley(handleDepositRequest)" #]
			
			onMsg(depositRequest : depositRequest(MATERIAL, QUANTITY)) {
				[#
					Mat = ws.Material.valueOf(payloadArg(0))
					Qty = payloadArg(1).toFloat()
				#]
			}
			
			updateResource [# "transporttrolley(moving_INDOOR)" #]
			println("\tTRANSPORTTROLLEY | moving to INDOOR")
			
			request trolleymover -m move : move(INDOOR)
	}
	Transition t1 whenReply moveDone -> arrivedIndoor
	
	State arrivedIndoor {
		[# var Answer: String = "" #]
		
		onMsg(moveDone : moveDone(ANSWER)) {
			[# Answer = payloadArg(0).toString() #]
		}
		
		if [# Answer == "OK" #] {
			updateResource [# "transporttrolley(arrived_INDOOR)" #]
			println("\tTRANSPORTTROLLEY | arrived to INDOOR")
			
			delay 2000
			
			updateResource [# "transporttrolley(pickupDone)" #]
			println("\tTRANSPORTTROLLEY | pickup done")
			
			replyTo depositRequest with pickupDone : pickupDone(OK) caller==wasteservice
		} else {
			println("\tTRANSPORTTROLLEY | failed pickup")
			[# Error = true #]
			
			replyTo depositRequest with pickupDone : pickupDone(NO) caller==wasteservice
		}
	}
	Goto moveToBox if [# Error == false #] else errorHandler
	
	State moveToBox {
		[# Loc = utils.getLocationFromMaterialType(Mat) #]
		
		updateResource [# "transporttrolley(moving_$Loc)" #]
		println("\tTRANSPORTTROLLEY | moving to $Loc")
		
		request trolleymover -m move : move($Loc)
	}
	Transition t2 whenReply moveDone -> arrivedToBox
	
	State arrivedToBox {
		[# var Answer = "" #]
		
		onMsg(moveDone : moveDone(ANSWER)) {
			[# Answer = payloadArg(0).toString() #]
		}
		
		if [# Answer == "OK" #] {
			updateResource [# "transporttrolley(arrived_$Loc)" #]
			println("\tTRANSPORTTROLLEY | arrived to $Loc")
		} else {
			println("\tTRANSPORTTROLLEY | failed $Loc")
			[# Error = true #]			
		}
	}
	Goto doDeposit
	
	State doDeposit {
		println("\tTRANSPORTTROLLEY | doing the deposit of $Qty KG of $Mat")
		delay 1000
	}
	Goto depositDone
	
	State depositDone {
		[# Loc = "HOME" #]
		
		updateResource [# "transporttrolley(depositDone_$Mat)" #]
		println("\tTRANSPORTTROLLEY | deposit done of $Qty KG of $Mat")
				
		request trolleymover -m move : move($Loc)
	}
	Transition t3 whenRequest depositRequest -> handleDepositRequest
				  whenReply moveDone -> endWork
	
	State endWork {
		updateResource [# "transporttrolley(arrived_HOME)" #]
		println("\tTRANSPORTTROLLEY | arrived to HOME")
	}
	Transition t4 whenRequest depositRequest -> handleDepositRequest
	
	State errorHandler {
		updateResource [# "transporttrolley(ERROR)" #]
		println("\tTRANSPORTTROLLEY | error - resetting...")
		
		[#
			Qty = 0F
			Error = false
			Loc = ""
		#]
		
		request trolleymover -m move : move(HOME)
	}
	Transition t5 whenReply moveDone -> idle
	
}


QActor trolleymover context ctxtrolley {
	[#
		var Actions = ""
		var Loc = ""
		var IsMoving = false
		SystemConfig.setTheConfiguration("SystemConfiguration")
		planner.initAI()
		planner.loadRoomMap("mapRoomEmpty")
	#]
	
	State init initial {
		println("\tTROLLEYMOVER | started.")
	}
	Goto idle
	
	State idle {
		println("\tTROLLEYMOVER | waiting...")
		[# IsMoving = false #]
	}
	Transition t0 whenRequest move -> handleMovement
	
	State handleMovement {
		onMsg(move : move(LOCATION)) {
			[# Loc = payloadArg(0) #]
		}
		
		println("\tTROLLEYMOVER | received movement to $Loc")
		
		if [# IsMoving #] {
			updateResource [# "trolleymover(handleMovement_stopPath)" #]
			println("\tTROLLEYMOVER | arrived move command when moving")
			
			request ourpathexecutor -m stopPath : stopPath(_)
		} else {
			[#
				var coord = utils.getClosestCoordinate(planner.get_curCoord(), Loc)
				planner.setGoal(coord.x, coord.y)
				planner.doPlan()
				Actions = planner.getActionsString()
				IsMoving = true
			#]
			
			updateResource [# "trolleymover(handleMovement_$Loc)" #]
			println("\tTROLLEYMOVER | actions: $Actions")
			
			request ourpathexecutor -m doPath : doPath($Actions, trolleymover)
		}
	}
	Transition t1 whenReply doPathDone -> handlePathDone
				  whenReply doPathFail -> handlePathFail
				  whenReply stopAck -> handleInterruptedMovement
				  whenRequest move -> handleMovement
	
	State handleInterruptedMovement {
		onMsg(stopAck : stopAck(_)) {
			[# IsMoving = false #]
			updateResource [# "trolleymover(handleInterruptedMovement)" #]
		}
	}
	Goto handleMovement
	
	State handlePathDone {
		[# IsMoving = false #]
		updateResource [# "trolleymover(handlePathDone_$Loc)" #]
		println("\tTROLLEYMOVER | arrived to $Loc")
		
		replyTo move with moveDone : moveDone(OK)
	}
	Goto idle
	
	State handlePathFail {
		[# IsMoving = false #]
		updateResource [# "trolleymover(handlePathFail_$Loc)" #]
		println("\tTROLLEYMOVER | path failed to $Loc")
		
		replyTo move with moveDone : moveDone(NO)
	}
	Goto idle
}

QActor ourpathexecutor context ctxtrolley {
	[# var CurMoveTodo = "" #]
	
	State init initial {
		[# CurMoveTodo = "" #]
		[# sysUtil.logMsgs = true #]
		println("\tPATHEXECUTOR | started")
	}
	Transition t0 whenRequest doPath -> doThePath
	
	State doThePath {
		onMsg(doPath : doPath(P, C)) {
			[#
				val path = payloadArg(0)
				println(path)
				pathut.setPath(path)
			#]
		}
		
		println("\tPATHEXECUTOR | pathTodo: ${pathut.getPathTodo()}")
	}
	Goto nextMove
	
	State nextMove {
		[# CurMoveTodo = pathut.nextMove() #]
		println("\tPATHEXECUTOR | curMoveTodo: $CurMoveTodo")
	}
	Goto endWorkOk if [# CurMoveTodo.length == 0 #] else doMove
	
	State handleStopPath {
		replyTo stopPath with stopAck : stopAck(_) caller==trolleymover
	}
	Goto init
	
	State doMove {
		[# planner.updateMap(CurMoveTodo, "") #]
		delay 350
	}
	Goto doMoveW if [# CurMoveTodo == "w" #] else doMoveTurn
	
	State doMoveTurn {
		forward basicrobot -m cmd : cmd($CurMoveTodo)
	}
	Transition t1 whenTime 350 -> nextMove
	
	State doMoveW {
		request basicrobot -m step : step(350)
	}
	Transition t2 whenEvent alarm -> handleAlarm
				  whenReply stepdone -> nextMove
				  whenReply stepfail -> endWorkKo
				  whenRequest stopPath -> handleStopPath
	
	State handleAlarm {
		[# var PathTodo = pathut.getPathTodo() #]
		println("\tPATHEXECUTOR | handleAlarm - pathTodo: $PathTodo")
	}
	
	State endWorkOk {
		println("\tPATHEXECUTOR | path done")
		replyTo doPath with doPathDone : doPathDone(OK) caller==trolleymover
	}
	Goto init
	
	State endWorkKo {
		[# var PathStillTodo = pathut.getPathTodo() #]
		println("\tPATHEXECUTOR | path failure - PathStillTodo: $PathStillTodo")
		replyTo doPath with doPathFail : doPathFail($PathStillTodo) caller==trolleymover
	}
	Transition t3 whenEvent alarm -> handleAlarm
}