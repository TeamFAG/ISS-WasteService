System demo_wasteservice

// Smartdevice
Request storeRequest : storeRequest(MATERIAL, QUANTITY)
Reply loadAccepted : loadAccepted(_)
Reply loadRejected : loadRejected(_)

// Wasteservice
Request depositRequest : depositRequest(MATERIAL, QUANTITY)
Reply pickupDone : pickupDone(RESULT)

// Transporttrolley
Request move : move(LOCATION)
Reply moveDone : moveDone(ANSWER)

Context ctxwasteservice ip[host="localhost" port=8050]
Context ctxtrolley ip[host="localhost" port=8060]

QActor wasteservice context ctxwasteservice {
	[#
		var CurrentMaterial: ws.Material
		var CurrentQuantity: Float
	#]
	
	State init initial {
		println("\tWASTESERVICE | started.")
	}
	Transition t0 whenRequest storeRequest -> handleStoreRequest
		
	State idle {
		println("\tWASTESERVICE | idle - waiting for storeRequests")
	}
	Transition t2 whenRequest storeRequest -> handleStoreRequest
	
	State handleStoreRequest {
		onMsg(storeRequest : storeRequest(MATERIAL, QUANTITY)) {
			[#
				CurrentMaterial = ws.Material.valueOf(payloadArg(0))
				CurrentQuantity = payloadArg(1).toFloat()
			#]
			
			println("\tWASTESERVICE | received store request: $CurrentQuantity KG of $CurrentMaterial")
			
			if [# ws.WasteServiceStatusManager.checkIfDepositPossible(CurrentMaterial, CurrentQuantity) #] {
				[#
					ws.WasteServiceStatusManager.updateBox(CurrentMaterial, CurrentQuantity)
				#]
								
				request transporttrolley -m depositRequest : depositRequest($CurrentMaterial, $CurrentQuantity)
				
				println("\tWASTESERVICE | sended depositRequest to trolley")
			} else {
				replyTo storeRequest with loadRejected : loadRejected(_) /*caller==smartdevicemock*/
				println("\tWASTESERVICE | rejected request from smartdevice")
			}
		}
	}
	Transition t1 whenReply pickupDone -> handlePickupReply
	
	State handlePickupReply {
		onMsg(pickupDone : pickupDone(RESULT)) {
			[# var Res = payloadArg(0).toString() #]
			
			if [# Res == "OK" #] {
				println("\tWASTESERVICE | arrived pickupDone reply OK")
				replyTo storeRequest with loadAccepted : loadAccepted(_) /*caller==smartdevicemock*/
			} else {
				println("\tWASTESERVICE | arrived pickupDone reply NO - FATAL ERROR")
				replyTo storeRequest with loadRejected : loadRejected(_) /*caller==smartdevicemock*/
			}
		}
	}
	Goto idle
}

QActor transporttrolley context ctxtrolley {
	[# 
		lateinit var Mat: ws.Material
		var Qty: Float
	#]
	
	State init initial {
		println("\tTRANSPORTTROLLEY | started...")	
	}
	Goto idle
	
	State idle {
		println("\tTRANSPORTROLLEY | waiting for requests...")
	}
	Transition t0 whenRequest depositRequest -> handleDepositRequest
	
	State handleDepositRequest {
		updateResource [# "transporttrolley(handleDepositRequest)" #]

		println("\tTRANSPORTTROLLEY | moving to indoor")
		updateResource [# "transporttrolley(moving_Indoor)" #]
		delay 1000
		println("\tTRANSPORTTROLLEY | arrived to indoor")
		updateResource [# "transporttrolley(arrived_Indoor)" #]
		
		onMsg(depositRequest : depositRequest(MATERIAL, QUANTITY)) {
			[# Mat = ws.Material.valueOf(payloadArg(0)) #]
			[# Qty = payloadArg(1).toFloat() #]
			
			replyTo depositRequest with pickupDone : pickupDone(ok)
		}
	}
	Goto moveToGlassBox if [# Mat == ws.Material.GLASS #] else moveToPlasticBox
	
	State moveToPlasticBox {
		println("\tTRANSPORT TROLLEY | moving to PlasticBox")
		updateResource [# "transporttrolley(moving_PlasticBox)" #]
		delay 1000
		println("\tTRANSPORT TROLLEY | arrived to PlasticBox")
		updateResource [# "transporttrolley(arrived_PlasticBox)" #]
	}
	Goto doDeposit
	
	State moveToGlassBox {
		println("\tTRANSPORT TROLLEY | moving to GlassBox")
		updateResource [# "transporttrolley(moving_GlassBox)" #]
		delay 1000
		println("\tTRANSPORT TROLLEY | arrived to GlassBox")
		updateResource [# "transporttrolley(arrived_GlassBox)" #]
	}
	Goto doDeposit
	
	State doDeposit {
		println("\tTRANSPORT TROLLEY | doing the deposit")
		delay 500
		println("\tTRANSPORT TROLLEY | deposit done")
		updateResource [# "transporttrolley(depositDone)" #]
	}
	Goto endRequest
	
	State endRequest {
		println("\tTRANSPORTTROLLEY | moving back to home")
		updateResource [# "transporttrolley(moving_Home)" #]
		delay 1000
		println("\tTRANSPORTTROLLEY | arrived to home")
		updateResource [# "transporttrolley(arrived_Home)" #]
	}
	Transition t1 whenRequest depositRequest -> handleDepositRequest
	
}