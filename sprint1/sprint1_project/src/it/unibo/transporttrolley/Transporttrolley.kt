/* Generated by AN DISI Unibo */ 
package it.unibo.transporttrolley

import it.unibo.kactor.*
import alice.tuprolog.*
import kotlinx.coroutines.CoroutineScope
import kotlinx.coroutines.delay
import kotlinx.coroutines.launch
import kotlinx.coroutines.runBlocking
	
class Transporttrolley ( name: String, scope: CoroutineScope  ) : ActorBasicFsm( name, scope ){

	override fun getInitialState() : String{
		return "init"
	}
	override fun getBody() : (ActorBasicFsm.() -> Unit){
		val interruptedStateTransitions = mutableListOf<Transition>()
		 
				lateinit var Mat: ws.Material
				var Qty: Float
				var Error: Boolean = false
				var Loc: String = ""
		return { //this:ActionBasciFsm
				state("init") { //this:State
					action { //it:State
						println("	TRANSPORTTROLLEY | started...")
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition( edgeName="goto",targetState="idle", cond=doswitch() )
				}	 
				state("idle") { //this:State
					action { //it:State
						println("	TRANSPORTROLLEY | waiting for requests...")
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition(edgeName="t05",targetState="handleDepositRequest",cond=whenRequest("depositRequest"))
				}	 
				state("handleDepositRequest") { //this:State
					action { //it:State
						updateResourceRep( "transporttrolley(handleDepositRequest)"  
						)
						if( checkMsgContent( Term.createTerm("depositRequest(MATERIAL,QUANTITY)"), Term.createTerm("depositRequest(MATERIAL,QUANTITY)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								 Mat = ws.Material.valueOf(payloadArg(0))  
								 Qty = payloadArg(1).toFloat()  
						}
						updateResourceRep( "transporttrolley(moving_Indoor)"  
						)
						println("	TRANSPORTTROLLEY | moving to indoor")
						request("move", "move(INDOOR)" ,"trolleymover" )  
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition(edgeName="t06",targetState="arrivedIndoor",cond=whenReply("moveDone"))
				}	 
				state("arrivedIndoor") { //this:State
					action { //it:State
						 var answer: String = ""  
						if( checkMsgContent( Term.createTerm("moveDone(ANSWER)"), Term.createTerm("moveDone(ANSWER)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								 answer = payloadArg(0).toString()  
						}
						if(  answer == "OK"  
						 ){println("	TRANSPORTTROLLEY | arrived to indoor")
						updateResourceRep( "transporttrolley(arrived_Indoor)"  
						)
						delay(2000) 
						updateResourceRep( "transporttrolley(pickupDone)"  
						)
						answer("depositRequest", "pickupDone", "pickupDone(OK)","wasteservice"   )  
						}
						else
						 {println("	TRANSPORTTROLLEY | fail(indoor)")
						 answer("depositRequest", "pickupDone", "pickupDone(NO)","wasteservice"   )  
						  Error = true  
						 }
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition( edgeName="goto",targetState="moveToBox", cond=doswitchGuarded({ Error == false  
					}) )
					transition( edgeName="goto",targetState="errorState", cond=doswitchGuarded({! ( Error == false  
					) }) )
				}	 
				state("moveToBox") { //this:State
					action { //it:State
						 Loc = utils.getLocationFromMaterialType(Mat)  
						println("	TRANSPORT TROLLEY | moving to $Loc")
						updateResourceRep( "transporttrolley(moving_$Loc)"  
						)
						request("move", "move($Loc)" ,"trolleymover" )  
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition(edgeName="t17",targetState="arrivedToBox",cond=whenReply("moveDone"))
				}	 
				state("arrivedToBox") { //this:State
					action { //it:State
						 var answer: String = ""  
						if( checkMsgContent( Term.createTerm("moveDone(ANSWER)"), Term.createTerm("moveDone(ANSWER)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								 answer = payloadArg(0).toString()  
						}
						if(  answer == "OK"  
						 ){println("	TRANSPORTTROLLEY | arrived to $Loc")
						updateResourceRep( "transporttrolley(arrived_$Loc)"  
						)
						}
						else
						 {println("	TRANSPORTTROLLEY | fail(indoor)")
						 answer("depositRequest", "pickupDone", "pickupDone(NO)","wasteservice"   )  
						  Error = true  
						 }
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition( edgeName="goto",targetState="doDeposit", cond=doswitch() )
				}	 
				state("doDeposit") { //this:State
					action { //it:State
						println("	TRANSPORT TROLLEY | doing the deposit of $Mat")
						delay(1000) 
						println("	TRANSPORT TROLLEY | deposit done $Mat")
						updateResourceRep( "transporttrolley(depositDone_$Mat)"  
						)
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition( edgeName="goto",targetState="moveToHome", cond=doswitch() )
				}	 
				state("moveToHome") { //this:State
					action { //it:State
						 Loc = "HOME"  
						println("	TRANSPORT TROLLEY | moving to $Loc")
						updateResourceRep( "transporttrolley(moving_$Loc)"  
						)
						request("move", "move($Loc)" ,"trolleymover" )  
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition(edgeName="t28",targetState="handleDepositRequest",cond=whenRequest("depositRequest"))
					transition(edgeName="t29",targetState="endWork",cond=whenReply("moveDone"))
				}	 
				state("endWork") { //this:State
					action { //it:State
						println("	TRANSPORTTROLLEY | arrived to home")
						updateResourceRep( "transporttrolley(arrived_Home)"  
						)
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition(edgeName="t310",targetState="handleDepositRequest",cond=whenRequest("depositRequest"))
				}	 
				state("errorState") { //this:State
					action { //it:State
						println("	TRANSPORTTROLLEY | error state - resetting...")
						updateResourceRep( "transporttrolley(ERROR)"  
						)
						 
									Qty = 0F
									Error = false
									Loc = ""
						request("move", "move(HOME)" ,"trolleymover" )  
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition(edgeName="t411",targetState="idle",cond=whenReply("moveDone"))
				}	 
			}
		}
}
